<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var locations = new (string name, string location)[]
{
	( "Back", "FaceName.Back, 0, 1, 0" ),
    ( "BackLeft", "FaceName.Back, -1, 1, 0" ),
    ( "BackLeftUp", "FaceName.Back, -1, 1, 1" ),
    ( "BackLeftDown", "FaceName.Back, -1, 1, -1" ),
    ( "BackDown", "FaceName.Back, 0, 1, -1" ),
    ( "BackUp", "FaceName.Back, 0, 1, 1" ),
    ( "BackRight", "FaceName.Back, 1, 1, 0" ),
    ( "BackRightUp", "FaceName.Back, 1, 1, 1" ),
    ( "BackRightDown", "FaceName.Back, 1, 1, -1" ),

    ( "Down", "FaceName.Down, 0, 0, -1" ),
    ( "DownFront", "FaceName.Down, 0, -1, -1" ),
    ( "DownLeftFront", "FaceName.Down, -1, -1, -1" ),
    ( "DownRightFront", "FaceName.Down, 1, -1, -1" ),
    ( "DownLeft", "FaceName.Down, -1, 0, -1" ),
    ( "DownRight", "FaceName.Down, 1, 0, -1" ),
    ( "DownBack", "FaceName.Down, 0, 1, -1" ),
    ( "DownLeftBack", "FaceName.Down, -1, 1, -1" ),
    ( "DownRightBack", "FaceName.Down, 1, 1, -1" ),
    
	( "Front", "FaceName.Front, 0, -1, 0" ),
    ( "FrontLeft", "FaceName.Front, -1, -1, 0" ),
    ( "FrontLeftUp", "FaceName.Front, -1, -1, 1" ),
    ( "FrontLeftDown", "FaceName.Front, -1, -1, -1" ),
    ( "FrontRight", "FaceName.Front, 1, -1, 0" ),
    ( "FrontRightUp", "FaceName.Front, 1, -1, 1" ),
    ( "FrontRightDown", "FaceName.Front, 1, -1, -1" ),
    ( "FrontUp", "FaceName.Front, 0, -1, 1" ),
    ( "FrontDown", "FaceName.Front, 0, -1, -1" ),
    
	( "Left", "FaceName.Left, -1, 0, 0" ),
    ( "LeftBack", "FaceName.Left, -1, 1, 0" ),
    ( "LeftBackUp", "FaceName.Left, -1, 1, 1" ),
    ( "LeftBackDown", "FaceName.Left, -1, 1, -1" ),
    ( "LeftFront", "FaceName.Left, -1, -1, 0" ),
    ( "LeftFrontUp", "FaceName.Left, -1, -1, 1" ),
    ( "LeftFrontDown", "FaceName.Left, -1, -1, -1" ),
    ( "LeftUp", "FaceName.Left, -1, 0, 1" ),
    ( "LeftDown", "FaceName.Left, -1, 0, -1" ),
    
	( "Right", "FaceName.Right, 1, 0, 0" ),
    ( "RightBack", "FaceName.Right, 1, 1, 0" ),
    ( "RightBackUp", "FaceName.Right, 1, 1, 1" ),
    ( "RightBackDown", "FaceName.Right, 1, 1, -1" ),
    ( "RightFront", "FaceName.Right, 1, -1, 0" ),
    ( "RightFrontUp", "FaceName.Right, 1, -1, 1" ),
    ( "RightFrontDown", "FaceName.Right, 1, -1, -1" ),
    ( "RightUp", "FaceName.Right, 1, 0, 1" ),
    ( "RightDown", "FaceName.Right, 1, 0, -1" ),
    
	( "Up", "FaceName.Up, 0, 0, 1" ),
    ( "UpBack", "FaceName.Up, 0, 1, 1" ),
    ( "UpLeftBack", "FaceName.Up, -1, 1, 1" ),
    ( "UpRightBack", "FaceName.Up, 1, 1, 1" ),
    ( "UpFront", "FaceName.Up, 0, -1, 1" ),
    ( "UpLeftFront", "FaceName.Up, -1, -1, 1" ),
    ( "UpRightFront", "FaceName.Up, 1, -1, 1" ),
    ( "UpLeft", "FaceName.Up, -1, 0, 1" ),
    ( "UpRight", "FaceName.Up, 1, 0, 1" )
};
#>
using System;

namespace RubiksCubeTrainer.Puzzle3x3
{
    partial struct Location
    {
<#
foreach (var (name, location) in locations)
{
#>
		public static Location <#= name #> { get; } = new Location(<#= location #>);
<#
}
#>
	}

	public static class LocationParser
	{
		public static Location Parse(string location)
		{
<#
foreach (var (name, _) in locations)
{
#>
			if ("<#= name #>".Equals(location, StringComparison.OrdinalIgnoreCase)) return Location.<#= name #>;
<#
}
#>

			throw new InvalidOperationException($"Unknown location: {location}");
		}

		public static string Format(Location location)
		{
<#
foreach (var (name, _) in locations)
{
#>
			if (location == Location.<#= name #>) return "<#= name #>";
<#
}
#>

			throw new InvalidOperationException();
		}
	}
}