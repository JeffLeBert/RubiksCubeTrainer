<?xml version="1.0" encoding="utf-8" ?>
<Solver>

  <Step Name="MoveBlueCenterToLeft">
    <InitialState>!Left Blue</InitialState>

    <AlgorithmCollection>
      <Description>Move blue face from Back to Left.</Description>
      <InitialState>Back Blue</InitialState>
      <Algorithms>y'</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move blue face from Front to Left.</Description>
      <InitialState>Front Blue</InitialState>
      <Algorithms>y</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move blue face from Right to Left.</Description>
      <InitialState>Right Blue</InitialState>
      <Algorithms>y2</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move blue face from Up to Left.</Description>
      <InitialState>Up Blue</InitialState>
      <Algorithms>z'</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move blue face from Down to Left.</Description>
      <InitialState>Down Blue</InitialState>
      <Algorithms>z</Algorithms>
    </AlgorithmCollection>

    <FinishedState>Left Blue</FinishedState>
  </Step>

  <Step Name="FirstPieceToBottomLeftEdge">
    <InitialState PreviousStep="MoveBlueCenterToLeft">!LeftDown Blue White</InitialState>

    <AlgorithmCollection>
      <Description>Flip down left edge.</Description>
      <InitialState>LeftDown White Blue</InitialState>
      <Algorithms>D F L, D' B' L', L B D, L' F' D'</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from back left.</Description>
      <InitialState>BackLeft White Blue</InitialState>
      <Algorithms>L'</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edit from back left and flip.</Description>
      <InitialState>BackLeft Blue White</InitialState>
      <Algorithms>B D</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from top left.</Description>
      <InitialState>LeftUp Blue White</InitialState>
      <Algorithms>L2</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from top left and flip.</Description>
      <InitialState>LeftUp White Blue</InitialState>
      <Algorithms>U B L', U' F' L, L F' D', L' B D</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from front left.</Description>
      <InitialState>FrontLeft White Blue</InitialState>
      <Algorithms>L</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from front left and flip.</Description>
      <InitialState>FrontLeft Blue White</InitialState>
      <Algorithms>F' D'</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from back bottom.</Description>
      <InitialState>BackDown Blue White</InitialState>
      <Algorithms>D</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from back bottom and flip.</Description>
      <InitialState>BackDown White Blue</InitialState>
      <Algorithms>B' L'</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from back top.</Description>
      <InitialState>BackUp Blue White</InitialState>
      <Algorithms>U' L2, B2 D</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from back top and flip.</Description>
      <InitialState>BackUp White Blue</InitialState>
      <Algorithms>B L'</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from front bottom.</Description>
      <InitialState>FrontDown Blue White</InitialState>
      <Algorithms>D'</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from front bottom and flip.</Description>
      <InitialState>FrontDown White Blue</InitialState>
      <Algorithms>F L</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from front up.</Description>
      <InitialState>FrontUp Blue White</InitialState>
      <Algorithms>F2 D', U L2</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from front up and flip.</Description>
      <InitialState>FrontUp White Blue</InitialState>
      <Algorithms>F' L</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from right down.</Description>
      <InitialState>RightDown Blue White</InitialState>
      <Algorithms>D2</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from right down and flip.</Description>
      <InitialState>RightDown White Blue</InitialState>
      <Algorithms>R F D', R' B' D, D B' L', D' F L</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from right back.</Description>
      <InitialState>RightBack White Blue</InitialState>
      <Algorithms>B' D</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from right back and flip.</Description>
      <InitialState>RightBack Blue White</InitialState>
      <Algorithms>R D2, B2 L'</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from right front.</Description>
      <InitialState>RightFront Blue White</InitialState>
      <Algorithms>R' D2, F2 L</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from right front and flip.</Description>
      <InitialState>RightFront White Blue</InitialState>
      <Algorithms>F D'</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from right up.</Description>
      <InitialState>RightUp Blue White</InitialState>
      <Algorithms>U2 L2, R2 D2</Algorithms>
    </AlgorithmCollection>
    <AlgorithmCollection>
      <Description>Move edge from right up.</Description>
      <InitialState>RightUp White Blue</InitialState>
      <Algorithms>U F' L, R B' D, R' F D', U' B L'</Algorithms>
    </AlgorithmCollection>

    <FinishedState PreviousStep="MoveBlueCenterToLeft">LeftDown Blue White</FinishedState>
  </Step>

  <Step Name="MoveLeftFrontToFrontBottom">
    <InitialState PreviousStep="FirstPieceToBottomLeftEdge">
      <!-- Left Front or Back can't already be in Front Down. -->
      <Checks>!FrontDown* Blue Red</Checks>
      <Checks>!FrontDown* Blue Orange</Checks>
      <!-- Pair not already joined at top. -->
      <Checks>!LeftFrontUp White Red Blue, !FrontUp Red Blue</Checks>
      <Checks>!RightFrontUp White Red Blue, !FrontUp Blue Red</Checks>
      <Checks>!LeftBackUp White Red Blue, !BackUp Blue Red</Checks>
      <Checks>!RightBackUp White Red Blue, !BackUp Red Blue</Checks>
      <Or>
        <!-- Left Front pair not already solved. -->
        <Checks>!LeftFront Blue Red</Checks>
        <Checks>!LeftFrontDown Blue White Red</Checks>
      </Or>
    </InitialState>

    <AlgorithmCollection>
      <Description>Move edge from front top.</Description>
      <InitialState>FrontUp* Red Blue</InitialState>
      <Algorithms>M</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from front left.</Description>
      <InitialState>FrontLeft* Red Blue</InitialState>
      <Algorithms>F'</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from front right.</Description>
      <InitialState>FrontRight* Red Blue</InitialState>
      <Algorithms>F</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from back left.</Description>
      <InitialState>LeftBack* Blue Red</InitialState>
      <Algorithms>L' D L, L2 F' L2, D' L' D, D2 B D2, B' U2 F2, B2 R2 F</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from back up.</Description>
      <InitialState>UpBack* Blue Red</InitialState>
      <Algorithms>U2 F2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from back right.</Description>
      <InitialState>BackRight* Blue Red</InitialState>
      <Algorithms>R2 F</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from back down.</Description>
      <InitialState>BackDown* Blue Red</InitialState>
      <Algorithms>L D2 L', L' D2 L, L2 D2 L2, B R2 F, B2 U2 F2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from up right.</Description>
      <InitialState>RightUp* Blue Red</InitialState>
      <Algorithms>R' F, U F2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from right down.</Description>
      <InitialState>RightDown* Blue Red</InitialState>
      <Algorithms>R F</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move edge from right up.</Description>
      <InitialState>LeftUp* Blue Red</InitialState>
      <Algorithms>U' F2</Algorithms>
    </AlgorithmCollection>

    <FinishedState PreviousStep="FirstPieceToBottomLeftEdge">FrontDown* Blue Red</FinishedState>
  </Step>

  <Step Name="MoveLeftFrontDownCornerToTop">
    <InitialState PreviousStep="MoveLeftFrontToFrontBottom">
      <Or>
        <Checks>LeftFrontDown* Red Blue White</Checks>
        <Checks>RightFrontDown* Red Blue White</Checks>
        <Checks>LeftBackDown* Red Blue White</Checks>
        <Checks>RightBackDown* Red Blue White</Checks>
      </Or>
    </InitialState>

    <AlgorithmCollection>
      <Description>Move Left Front Down corner to top.</Description>
      <InitialState>LeftFrontDown* Red Blue White</InitialState>
      <Algorithms>U2 F2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move Right Front Down corner to top.</Description>
      <InitialState>RightFrontDown* Red Blue White</InitialState>
      <Algorithms>R, R2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move Left Back Down corner to top.</Description>
      <InitialState>LeftBackDown* Red Blue White</InitialState>
      <Algorithms>B', B2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Move Right Back Down corner to top.</Description>
      <InitialState>RightBackDown* Red Blue White</InitialState>
      <Algorithms>R', R2, B, B2</Algorithms>
    </AlgorithmCollection>

    <FinishedState PreviousStep="MoveLeftFrontToFrontBottom">
      <Or>
        <Checks>LeftFrontUp* Red Blue White</Checks>
        <Checks>RightFrontUp* Red Blue White</Checks>
        <Checks>LeftBackUp* Red Blue White</Checks>
        <Checks>RightBackUp* Red Blue White</Checks>
      </Or>
    </FinishedState>
  </Step>

  <Step Name="RotateLeftFrontDownWhiteCornerFacingOut">
    <InitialState PreviousStep="MoveLeftFrontToFrontBottom">
      <Checks>FrontDown* Red Blue</Checks>
      <Or>
        <Checks>LeftFrontUp* Red Blue White, !LeftFrontUp White</Checks>
        <Checks>RightFrontUp* Red Blue White, !RightFrontUp White</Checks>
        <Checks>LeftBackUp* Red Blue White, !LeftBackUp White</Checks>
        <Checks>RightBackUp* Red Blue White, !RightBackUp White</Checks>
      </Or>
    </InitialState>

    <AlgorithmCollection>
      <Description>Rotate white simple corner out.</Description>
      <InitialState>
        <Or>
          <Checks>LeftFrontUp Blue White Red</Checks>
          <Checks>LeftBackUp Red Blue White</Checks>
          <Checks>RightFrontUp Red Blue White</Checks>
          <Checks>RightBackUp Blue White Red</Checks>
        </Or>
      </InitialState>
      <Algorithms>U, U'</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Rotate white Left Front Up corner out.</Description>
      <InitialState>LeftFrontUp Red Blue White</InitialState>
      <Algorithms>L' U L</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Rotate white Left Back Up corner out.</Description>
      <InitialState>LeftBackUp Blue White Red</InitialState>
      <Algorithms>U, U'</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Rotate white Right Back Up corner out.</Description>
      <InitialState>RightBackUp Red Blue White</InitialState>
      <Algorithms>R' U, R' U'</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Rotate white Right Front Up corner out.</Description>
      <InitialState>RightFrontUp Blue White Red</InitialState>
      <Algorithms>R</Algorithms>
    </AlgorithmCollection>

    <FinishedState PreviousStep="MoveLeftFrontToFrontBottom">
      <Or>
        <Checks>LeftFrontUp White Red Blue</Checks>
        <Checks>RightFrontUp White Red Blue</Checks>
        <Checks>LeftBackUp White Red Blue</Checks>
        <Checks>RightBackUp White Red Blue</Checks>
      </Or>
    </FinishedState>
  </Step>

  <Step Name="JoinFrontDownToTopCorner">
    <InitialState PreviousStep="RotateLeftFrontDownWhiteCornerFacingOut" />

    <AlgorithmCollection>
      <Description>Join pair at top.</Description>
      <InitialState>LeftFrontUp White Red Blue, FrontDown Red Blue</InitialState>
      <Algorithms>U2 M2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Join pair at top.</Description>
      <InitialState>LeftFrontUp White Red Blue, FrontDown Blue Red</InitialState>
      <Algorithms>M'</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Join pair at top.</Description>
      <InitialState>RightFrontUp White Red Blue, FrontDown Red Blue</InitialState>
      <Algorithms>M'</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Join pair at top.</Description>
      <InitialState>RightFrontUp White Red Blue, FrontDown Blue Red</InitialState>
      <Algorithms>U2 M2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Join pair at top.</Description>
      <InitialState>LeftBackUp White Red Blue, FrontDown Red Blue</InitialState>
      <Algorithms>U2 M'</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Join pair at top.</Description>
      <InitialState>LeftBackUp White Red Blue, FrontDown Blue Red</InitialState>
      <Algorithms>M2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Join pair at top.</Description>
      <InitialState>RightBackUp White Red Blue, FrontDown Red Blue</InitialState>
      <Algorithms>M2</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Join pair at top.</Description>
      <InitialState>RightBackUp White Red Blue, FrontDown Blue Red</InitialState>
      <Algorithms>U2 M'</Algorithms>
    </AlgorithmCollection>

    <FinishedState PreviousStep="MoveLeftFrontToFrontBottom">
      <Or>
        <!-- Pair joined at top. -->
        <Checks>LeftFrontUp White Red Blue, FrontUp Red Blue</Checks>
        <Checks>RightFrontUp White Red Blue, FrontUp Blue Red</Checks>
        <Checks>LeftBackUp White Red Blue, BackUp Blue Red</Checks>
        <Checks>RightBackUp White Red Blue, BackUp Red Blue</Checks>
      </Or>
    </FinishedState>
  </Step>

  <Step Name="PairToLeftFront">
    <InitialState PreviousStep="JoinFrontDownToTopCorner" />

    <AlgorithmCollection>
      <Description>Pair to Left Front.</Description>
      <InitialState>LeftFrontUp White Red Blue, FrontUp Red Blue</InitialState>
      <Algorithms>F'</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Pair to Left Front.</Description>
      <InitialState>RightFrontUp White Red Blue, FrontUp Blue Red</InitialState>
      <Algorithms>L' U L</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Pair to Left Front.</Description>
      <InitialState>LeftBackUp White Red Blue, BackUp Blue Red</InitialState>
      <Algorithms>U2 L' U L</Algorithms>
    </AlgorithmCollection>

    <AlgorithmCollection>
      <Description>Pair to Left Front.</Description>
      <InitialState>RightBackUp White Red Blue, BackUp Red Blue</InitialState>
      <Algorithms>U2 F'</Algorithms>
    </AlgorithmCollection>

    <FinishedState PreviousStep="FirstPieceToBottomLeftEdge">LeftFront Blue Red, LeftFrontDown Blue White Red</FinishedState>
  </Step>
  
</Solver>