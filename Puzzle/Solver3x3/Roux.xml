<?xml version="1.0" encoding="utf-8" ?>
<Solver>

  <!-- Left algorithms -->

  <States Name="Left">
    <State Name="Solved">Left Blue</State>
  </States>

  <Algorithms Name="Left">
    <InitialState>!{Left.Solved}</InitialState>
    <FinishedState>{Left.Solved}</FinishedState>

    <Algorithm Name="FromBack">
      <Description>Move blue face from Back to Left</Description>
      <InitialState>Back Blue</InitialState>
      <Moves>y'</Moves>
    </Algorithm>
    <Algorithm Name="FromFront">
      <Description>Move blue face from Front to Left</Description>
      <InitialState>Front Blue</InitialState>
      <Moves>y</Moves>
    </Algorithm>
    <Algorithm Name="FromRight">
      <Description>Move blue face from Right to Left</Description>
      <InitialState>Right Blue</InitialState>
      <Moves>y2</Moves>
    </Algorithm>
    <Algorithm Name="FromUp">
      <Description>Move blue face from Up to Left</Description>
      <InitialState>Up Blue</InitialState>
      <Moves>z'</Moves>
    </Algorithm>
    <Algorithm Name="FromDown">
      <Description>Move blue face from Down to Left</Description>
      <InitialState>Down Blue</InitialState>
      <Moves>z</Moves>
    </Algorithm>
  </Algorithms>

  <!-- LeftDown and RightDown edge algorithms -->

  <States>
    <State Name="LeftDown.NotSolved">{Left.Solved}, !LeftDown Blue White</State>
    <State Name="LeftDown.Solved">{Left.Solved}, LeftDown Blue White</State>
    <State Name="RightDown.NotSolved">{Left.Solved}, !RightDown Green White</State>
    <State Name="RightDown.Solved">{Left.Solved}, RightDown Green White</State>
    <State Name="LeftRightDown.Solved">{LeftDown.Solved}, {RightDown.Solved}</State>
  </States>

  <Algorithms Name="LeftDown">
    <InitialState>{LeftDown.NotSolved}</InitialState>
    <FinishedState>{LeftDown.Solved}</FinishedState>

    <Algorithm Name="BackLeft_White_Blue">
      <Description>Move edge from back left</Description>
      <InitialState>BackLeft White Blue</InitialState>
      <Moves>L', l'</Moves>
    </Algorithm>

    <Algorithm Name="LeftUp_Blue_White">
      <Description>Move edge from top left</Description>
      <InitialState>LeftUp Blue White</InitialState>
      <Moves>L2, l2</Moves>
    </Algorithm>

    <Algorithm Name="FrontLeft_White_Blue">
      <Description>Move edge from front left</Description>
      <InitialState>FrontLeft White Blue</InitialState>
      <Moves>L, l</Moves>
    </Algorithm>

    <Algorithm Name="RightDown_Blue_White">
      <Description>Move edge from right down</Description>
      <InitialState>RightDown Blue White</InitialState>
      <Moves>D2</Moves>
    </Algorithm>
    <Algorithm Name="RightDown_White_Blue">
      <Description>Move edge from right down and flip</Description>
      <InitialState>RightDown White Blue</InitialState>
      <Moves>R F D', R' B' D, D B' L', D B' l', D M' D', D l' D', D r D', D' F L, D' F l, D' M D, D' l D, D' r' D, r F D', r' B' D</Moves>
    </Algorithm>
  </Algorithms>

  <Algorithms Name="LeftDown.RightDownSolved">
    <InitialState>{LeftDown.NotSolved}, {RightDown.Solved}</InitialState>
    <FinishedState>{LeftDown.Solved}, {RightDown.Solved}</FinishedState>

    <Algorithm Name="LeftDown_White_Blue">
      <Description>Flip LeftDown edge</Description>
      <InitialState>LeftDown White Blue</InitialState>
      <Moves>L D' B D, L B' U' L2, L B' U' l2, L' F U L2, L' F U l2, L' D F' D', L2 U B L', L2 U B l', L2 U' F' L, L2 U' F' l, D F D' L, D F D' l, D' B' D L', D' B' D l', l D' B D, l B' U' L2, l B' U' l2, l' F U L2, l' F U l2, l' D F' D', l2 U B L', l2 U B l', l2 U' F' L, l2 U' F' l</Moves>
    </Algorithm>

    <Algorithm Name="BackLeft_Blue_White">
      <Description>Move edit from back left and flip</Description>
      <InitialState>BackLeft Blue White</InitialState>
      <Moves>D' B D, B' U' L2, B' U' l2</Moves>
    </Algorithm>

    <Algorithm Name="LeftUp_White_Blue">
      <Description>Move edge from top left and flip</Description>
      <InitialState>LeftUp White Blue</InitialState>
      <Moves>U B L', U B l', U' F' L, U' F' l</Moves>
    </Algorithm>

    <Algorithm Name="FrontLeft_Blue_White">
      <Description>Move edge from front left and flip</Description>
      <InitialState>FrontLeft Blue White</InitialState>
      <Moves>F U L2, F U l2, D F' D'</Moves>
    </Algorithm>

    <Algorithm Name="BackDown_Blue_White">
      <Description>Move edge from back bottom</Description>
      <InitialState>BackDown Blue White</InitialState>
      <Moves>R D R', R D r', R' D R, R' D r, R2 D R2, R2 D r2, B2 U' L2, B2 U' l2, M B L', M B l', M' F L, M' F l, M2 U L2, M2 U l2, l B L', l B l', l' F L, l' F l, l2 U L2, l2 U l2</Moves>
    </Algorithm>
    <Algorithm Name="BackDown_White_Blue">
      <Description>Move edge from back bottom and flip</Description>
      <InitialState>BackDown White Blue</InitialState>
      <Moves>B' L', B' l'</Moves>
    </Algorithm>

    <Algorithm Name="BackUp_Blue_White">
      <Description>Move edge from back top</Description>
      <InitialState>BackUp Blue White</InitialState>
      <Moves>U' L2, U' l2</Moves>
    </Algorithm>
    <Algorithm Name="BackUp_White_Blue">
      <Description>Move edge from back top and flip</Description>
      <InitialState>BackUp White Blue</InitialState>
      <Moves>B L', B l'</Moves>
    </Algorithm>

    <Algorithm Name="FrontDown_Blue_White">
      <Description>Move edge from front bottom</Description>
      <InitialState>FrontDown Blue White</InitialState>
      <Moves>F2 U L2, F2 U l2, R D' R', R D' r', R' D' R, R' D' r, R2 D' R2, R2 D' r2, M B' L', M B' l', M' F' L, M' F' l, M2 U' L2, M2 U' l2, l B' L', l B' l', l' F' L, l' F' l, l2 U' L2, l2 U' l2</Moves>
    </Algorithm>
    <Algorithm Name="FrontDown_White_Blue">
      <Description>Move edge from front bottom and flip</Description>
      <InitialState>FrontDown White Blue</InitialState>
      <Moves>F L, F l</Moves>
    </Algorithm>

    <Algorithm Name="FrontUp_Blue_White">
      <Description>Move edge from front up</Description>
      <InitialState>FrontUp Blue White</InitialState>
      <Moves>U L2, U l2</Moves>
    </Algorithm>
    <Algorithm Name="FrontUp_White_Blue">
      <Description>Move edge from front up and flip</Description>
      <InitialState>FrontUp White Blue</InitialState>
      <Moves>F' L, F' l</Moves>
    </Algorithm>

    <Algorithm Name="RightBack_White_Blue">
      <Description>Move edge from right back</Description>
      <InitialState>RightBack White Blue</InitialState>
      <Moves>D' B' D, B U' L2, B U' l2</Moves>
    </Algorithm>
    <Algorithm Name="RightBack_Blue_White">
      <Description>Move edge from right back and flip</Description>
      <InitialState>RightBack Blue White</InitialState>
      <Moves>B2 L', B2 l'</Moves>
    </Algorithm>

    <Algorithm Name="RightFront_Blue_White">
      <Description>Move edge from right front</Description>
      <InitialState>RightFront Blue White</InitialState>
      <Moves>F2 L, F2 l</Moves>
    </Algorithm>
    <Algorithm Name="RightFront_White_Blue">
      <Description>Move edge from right front and flip</Description>
      <InitialState>RightFront White Blue</InitialState>
      <Moves>F' U L2, F' U l2, D F D'</Moves>
    </Algorithm>

    <Algorithm Name="RightUp_Blue_White">
      <Description>Move edge from right up</Description>
      <InitialState>RightUp Blue White</InitialState>
      <Moves>U2 L2, U2 l2</Moves>
    </Algorithm>
    <Algorithm Name="RightUp_White_Blue">
      <Description>Move edge from right up</Description>
      <InitialState>RightUp White Blue</InitialState>
      <Moves>U F' L, U F' l, U' B L', U' B l'</Moves>
    </Algorithm>
  </Algorithms>

  <Algorithms Name="LeftDown.RightDownNotSolved">
    <InitialState>{LeftDown.NotSolved}, {RightDown.NotSolved}</InitialState>
    <FinishedState>{LeftDown.Solved}</FinishedState>

    <Algorithm Name="LeftDown_White_Blue">
      <Description>Flip LeftDown edge</Description>
      <InitialState>LeftDown White Blue</InitialState>
      <Moves>L B D, L' F' D', D F L, D F l, D M D, D l D, D r' D, D' B' L', D' B' l', D' M' D', D' l' D', D' r D', l B D, l' F' D'</Moves>
    </Algorithm>

    <Algorithm Name="BackLeft_Blue_White">
      <Description>Move edit from back left and flip</Description>
      <InitialState>BackLeft Blue White</InitialState>
      <Moves>B D</Moves>
    </Algorithm>

    <Algorithm Name="LeftUp_White_Blue">
      <Description>Move edge from top left and flip</Description>
      <InitialState>LeftUp White Blue</InitialState>
      <Moves>U B L', U B l', U M' D, U l' D, U r D, U' F' L, U' F' l, U' M D', U' l D', U' r' D', L F' D', L' B D, l F' D', l' B D</Moves>
    </Algorithm>

    <Algorithm Name="FrontLeft_Blue_White">
      <Description>Move edge from front left and flip</Description>
      <InitialState>FrontLeft Blue White</InitialState>
      <Moves>F' D'</Moves>
    </Algorithm>

    <Algorithm Name="BackDown_Blue_White">
      <Description>Move edge from back bottom</Description>
      <InitialState>BackDown Blue White</InitialState>
      <Moves>D</Moves>
    </Algorithm>
    <Algorithm Name="BackDown_White_Blue">
      <Description>Move edge from back bottom and flip</Description>
      <InitialState>BackDown White Blue</InitialState>
      <Moves>B' L', B' l', M' D', l' D', r D'</Moves>
    </Algorithm>

    <Algorithm Name="BackUp_Blue_White">
      <Description>Move edge from back top</Description>
      <InitialState>BackUp Blue White</InitialState>
      <Moves>U' L2, U' l2, B2 D, M2 D', l2 D', r2 D'</Moves>
    </Algorithm>
    <Algorithm Name="BackUp_White_Blue">
      <Description>Move edge from back top and flip</Description>
      <InitialState>BackUp White Blue</InitialState>
      <Moves>B L', B l', M' D, l' D, r D</Moves>
    </Algorithm>

    <Algorithm Name="FrontDown_Blue_White">
      <Description>Move edge from front bottom</Description>
      <InitialState>FrontDown Blue White</InitialState>
      <Moves>D'</Moves>
    </Algorithm>
    <Algorithm Name="FrontDown_White_Blue">
      <Description>Move edge from front bottom and flip</Description>
      <InitialState>FrontDown White Blue</InitialState>
      <Moves>F L, F l, M D, l D, r' D</Moves>
    </Algorithm>

    <Algorithm Name="FrontUp_Blue_White">
      <Description>Move edge from front up</Description>
      <InitialState>FrontUp Blue White</InitialState>
      <Moves>F2 D', U L2, U l2, M2 D, l2 D, r2 D</Moves>
    </Algorithm>
    <Algorithm Name="FrontUp_White_Blue">
      <Description>Move edge from front up and flip</Description>
      <InitialState>FrontUp White Blue</InitialState>
      <Moves>F' L, F' l, M D', l D', r' D'</Moves>
    </Algorithm>

    <Algorithm Name="RightBack_White_Blue">
      <Description>Move edge from right back</Description>
      <InitialState>RightBack White Blue</InitialState>
      <Moves>B' D</Moves>
    </Algorithm>
    <Algorithm Name="RightBack_Blue_White">
      <Description>Move edge from right back and flip</Description>
      <InitialState>RightBack Blue White</InitialState>
      <Moves>R D2, B2 L', B2 l', r D2</Moves>
    </Algorithm>

    <Algorithm Name="RightFront_Blue_White">
      <Description>Move edge from right front</Description>
      <InitialState>RightFront Blue White</InitialState>
      <Moves>F2 L, F2 l, R' D2, r' D2</Moves>
    </Algorithm>
    <Algorithm Name="RightFront_White_Blue">
      <Description>Move edge from right front and flip</Description>
      <InitialState>RightFront White Blue</InitialState>
      <Moves>F D'</Moves>
    </Algorithm>

    <Algorithm Name="RightUp_Blue_White">
      <Description>Move edge from right up</Description>
      <InitialState>RightUp Blue White</InitialState>
      <Moves>R2 D2, U2 L2, U2 l2, r2 D2</Moves>
    </Algorithm>
    <Algorithm Name="RightUp_White_Blue">
      <Description>Move edge from right up</Description>
      <InitialState>RightUp White Blue</InitialState>
      <Moves>R B' D, R' F D', U F' L, U F' l, U M D', U l D', U r' D', U' B L', U' B l', U' M' D, U' l' D, U' r D, r B' D, r' F D'</Moves>
    </Algorithm>
  </Algorithms>

  <Algorithms Name="RightDown">
    <InitialState>{RightDown.NotSolved}</InitialState>
    <FinishedState>{RightDown.Solved}</FinishedState>

    <Algorithm Name="RightFront">
      <Description>Move edge down</Description>
      <InitialState>RightFront Green White</InitialState>
      <Moves>R', r'</Moves>
    </Algorithm>

    <Algorithm Name="RightBack">
      <Description>Move edge down</Description>
      <InitialState>RightBack Green White</InitialState>
      <Moves>R, r</Moves>
    </Algorithm>

    <Algorithm Name="RightUp">
      <Description>Move edge down</Description>
      <InitialState>RightUp Green White</InitialState>
      <Moves>R2, r2</Moves>
    </Algorithm>

    <Algorithm Name="LeftDown">
      <Description>Move edge around</Description>
      <InitialState>LeftDown Green White</InitialState>
      <Moves>D2</Moves>
    </Algorithm>
    <Algorithm Name="LeftDownFlip">
      <Description>Move edge around</Description>
      <InitialState>LeftDown White Green</InitialState>
      <Moves>L B D', L' F' D, D F' R', D F' r', D M D', D l D', D r' D', D' B R, D' B r, D' M' D, D' l' D, D' r D, l B D', l' F' D</Moves>
    </Algorithm>
  </Algorithms>

  <Algorithms Name="RightDown.LeftDownSolved">
    <InitialState>{RightDown.NotSolved}, {LeftDown.Solved}</InitialState>
    <FinishedState>{RightDown.Solved}, {LeftDown.Solved}</FinishedState>

    <Algorithm Name="RightDownFlip">
      <Description>Flip down edge</Description>
      <InitialState>RightDown White Green</InitialState>
      <Moves>R F' U' R2, R F' U' r2, R D' F D, R' D B' D', R' B U R2, R' B U r2, R2 U F R', R2 U F r', R2 U' B' R, R2 U' B' r, D B D' R, D B D' r, D' F' D R', D' F' D r', r F' U' R2, r F' U' r2, r D' F D, r' D B' D', r' B U R2, r' B U r2, r2 U F R', r2 U F r', r2 U' B' R, r2 U' B' r</Moves>
    </Algorithm>

    <Algorithm Name="RigthFrontFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>RightFront White Green</InitialState>
      <Moves>F' U' R2, F' U' r2, D' F D</Moves>
    </Algorithm>

    <Algorithm Name="RightBackFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>RightBack White Green</InitialState>
      <Moves>D B' D', B U R2, B U r2</Moves>
    </Algorithm>

    <Algorithm Name="RightUpFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>RightUp White Green</InitialState>
      <Moves>U F R', U F r', U' B' R, U' B' r</Moves>
    </Algorithm>

    <Algorithm Name="FrontUp">
      <Description>Move edge down</Description>
      <InitialState>FrontUp Green White</InitialState>
      <Moves>U' R2, U' r2</Moves>
    </Algorithm>
    <Algorithm Name="FrontUpFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>FrontUp White Green</InitialState>
      <Moves>F R', F r'</Moves>
    </Algorithm>

    <Algorithm Name="BackUp">
      <Description>Move edge down</Description>
      <InitialState>BackUp Green White</InitialState>
      <Moves>U R2, U r2</Moves>
    </Algorithm>
    <Algorithm Name="BackUpFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>BackUp White Green</InitialState>
      <Moves>B' R, B' r</Moves>
    </Algorithm>

    <Algorithm Name="LeftUp">
      <Description>Move edge down</Description>
      <InitialState>LeftUp Green White</InitialState>
      <Moves>U2 R2, U2 r2</Moves>
    </Algorithm>
    <Algorithm Name="LeftUpFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>LeftUp White Green</InitialState>
      <Moves>U B' R, U B' r, U' F R', U' F r'</Moves>
    </Algorithm>

    <Algorithm Name="FrontDown">
      <Description>Move edge down</Description>
      <InitialState>FrontDown Green White</InitialState>
      <Moves>F2 U' R2, F2 U' r2, L D L', L D l', L' D L, L' D l, L2 D L2, L2 D l2, M B R, M B r, M' F R', M' F r', M2 U R2, M2 U r2, r F R', r F r', r' B R, r' B r, r2 U R2, r2 U r2</Moves>
    </Algorithm>
    <Algorithm Name="FrontDownFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>FrontDown White Green</InitialState>
      <Moves>F' R', F' r'</Moves>
    </Algorithm>

    <Algorithm Name="BackDown">
      <Description>Move edge down</Description>
      <InitialState>BackDown White Green</InitialState>
      <Moves>B R, B r</Moves>
    </Algorithm>
    <Algorithm Name="BackDownFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>BackDown Green White</InitialState>
      <Moves>L D' L', L D' l', L' D' L, L' D' l, L2 D' L2, L2 D' l2, B2 U R2, B2 U r2, M B' R, M B' r, M' F' R', M' F' r', M2 U' R2, M2 U' r2, r F' R', r F' r', r' B' R, r' B' r, r2 U' R2, r2 U' r2</Moves>
    </Algorithm>

    <Algorithm Name="LeftBack">
      <Description>Move edge from LeftBack</Description>
      <InitialState>LeftBack Green White</InitialState>
      <Moves>B2 R, B2 r</Moves>
    </Algorithm>
    <Algorithm Name="LeftBackFlip">
      <Description>Move edge from LeftBack</Description>
      <InitialState>LeftBack White Green</InitialState>
      <Moves>D B D', B' U R2, B' U r2</Moves>
    </Algorithm>

    <Algorithm Name="LeftFront">
      <Description>Move edge from LeftBack</Description>
      <InitialState>LeftFront Green White</InitialState>
      <Moves>F2 R', F2 r'</Moves>
    </Algorithm>
    <Algorithm Name="LeftFrontFlip">
      <Description>Move edge from LeftFront</Description>
      <InitialState>LeftFront White Green</InitialState>
      <Moves>F U' R2, F U' r2, D' F' D</Moves>
    </Algorithm>
  </Algorithms>

  <Algorithms Name="RightDown.LeftDownNotSolved">
    <InitialState>{RightDown.NotSolved}, {LeftDown.NotSolved}</InitialState>
    <FinishedState>{RightDown.Solved}</FinishedState>

    <Algorithm Name="RightDownFlip">
      <Description>Flip down edge</Description>
      <InitialState>RightDown White Green</InitialState>
      <Moves>R F D, R' B' D', D B R, D B r, D M' D, D l' D, D r D, D' F' R', D' F' r', D' M D', D' l D', D' r' D', r F D, r' B' D'</Moves>
    </Algorithm>

    <Algorithm Name="RigthFrontFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>RightFront White Green</InitialState>
      <Moves>F D</Moves>
    </Algorithm>

    <Algorithm Name="RightBackFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>RightBack White Green</InitialState>
      <Moves>B' D'</Moves>
    </Algorithm>

    <Algorithm Name="RightUpFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>RightUp White Green</InitialState>
      <Moves>R B' D', R' F D, U F R', U F r', U M D, U l D, U r' D, U' B' R, U' B' r, U' M' D', U' l' D', U' r D', r B' D', r' F D</Moves>
    </Algorithm>

    <Algorithm Name="FrontUp">
      <Description>Move edge down</Description>
      <InitialState>FrontUp Green White</InitialState>
      <Moves>F2 D, U' R2, U' r2, M2 D', l2 D', r2 D'</Moves>
    </Algorithm>

    <Algorithm Name="FrontUpFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>FrontUp White Green</InitialState>
      <Moves>F R', F r', M D, l D, r' D</Moves>
    </Algorithm>

    <Algorithm Name="BackUp">
      <Description>Move edge down</Description>
      <InitialState>BackUp Green White</InitialState>
      <Moves>U R2, U r2, B2 D', M2 D, l2 D, r2 D</Moves>
    </Algorithm>
    <Algorithm Name="BackUpFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>BackUp White Green</InitialState>
      <Moves>B' R, B' r, M' D', l' D', r D'</Moves>
    </Algorithm>

    <Algorithm Name="LeftUp">
      <Description>Move edge down</Description>
      <InitialState>LeftUp Green White</InitialState>
      <Moves>U2 R2, U2 r2, L2 D2, l2 D2</Moves>
    </Algorithm>
    <Algorithm Name="LeftUpFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>LeftUp White Green</InitialState>
      <Moves>U B' R, U B' r, U M' D', U l' D', U r D', U' F R', U' F r', U' M D, U' l D, U' r' D, L F' D, L' B D', l F' D, l' B D'</Moves>
    </Algorithm>

    <Algorithm Name="FrontDown">
      <Description>Move edge down</Description>
      <InitialState>FrontDown Green White</InitialState>
      <Moves>D</Moves>
    </Algorithm>
    <Algorithm Name="FrontDownFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>FrontDown White Green</InitialState>
      <Moves>F' R', F' r', M D', l D', r' D'</Moves>
    </Algorithm>

    <Algorithm Name="BackDown">
      <Description>Move edge down</Description>
      <InitialState>BackDown White Green</InitialState>
      <Moves>B R, B r, M' D, l' D, r D</Moves>
    </Algorithm>
    <Algorithm Name="BackDownFlip">
      <Description>Flip and move edge down</Description>
      <InitialState>BackDown Green White</InitialState>
      <Moves>D'</Moves>
    </Algorithm>

    <Algorithm Name="LeftBack">
      <Description>Move edge from LeftBack</Description>
      <InitialState>LeftBack Green White</InitialState>
      <Moves>L' D2, B2 R, B2 r, l' D2</Moves>
    </Algorithm>
    <Algorithm Name="LeftBackFlip">
      <Description>Move edge from LeftBack</Description>
      <InitialState>LeftBack White Green</InitialState>
      <Moves>B D'</Moves>
    </Algorithm>

    <Algorithm Name="LeftFront">
      <Description>Move edge from LeftFront</Description>
      <InitialState>LeftFront Green White</InitialState>
      <Moves>F2 R', F2 r', L D2, l D2</Moves>
    </Algorithm>
    <Algorithm Name="LeftFrontFlip">
      <Description>Move edge from LeftFront</Description>
      <InitialState>LeftFront White Green</InitialState>
      <Moves>F' D</Moves>
    </Algorithm>
  </Algorithms>

  <!-- Side pair algorithms -->

  <States Name="Blocks">
    <State Name="FrontDownInPosition">
      <Or>
        <State>FrontDown* C1 C2</State>
        <State>FrontDown* C1 C3</State>
      </Or>
    </State>
    <State Name="TopCornerWhitePointingOut">
      <Or>
        <State>LeftFrontUp White C1 C2</State>
        <State>RightFrontUp White C1 C2</State>
        <State>LeftBackUp White C1 C2</State>
        <State>RightBackUp White C1 C2</State>
      </Or>
    </State>
    <State Name="PairInPositionAtTop">
      <Or>
        <State>LeftFrontUp White C1 C2, FrontUp C1 C2</State>
        <State>RightBackUp White C1 C2, BackUp C1 C2</State>
        <State>RightFrontUp White C1 C2, FrontUp C2 C1</State>
        <State>LeftBackUp White C1 C2, BackUp C2 C1</State>
      </Or>
    </State>
    <State Name="SpecificFrontDownPieceInPosition">{LeftRightDown.Solved}, FrontDown* C1 C2</State>
    <State Name="ReadyToJoinPairAtTop">{Blocks.SpecificFrontDownPieceInPosition C1 C2}, {Blocks.TopCornerWhitePointingOut C1 C2}</State>
    <State Name="LeftFrontSolved">LeftFront Blue Red, LeftFrontDown Blue White Red</State>
    <State Name="LeftBackSolved">LeftBack Blue Orange, LeftBackDown Blue Orange White</State>
    <State Name="RightFrontSolved">RightFront Green Red, RightFrontDown Green Red White</State>
    <State Name="RightBackSolved">RightBack Green Orange, RightBackDown Green White Orange</State>
    <State Name="Solved">{Blocks.LeftFrontSolved}, {Blocks.LeftBackSolved}, {Blocks.RightFrontSolved}, {Blocks.RightBackSolved}</State>
  </States>

  <AlgorithmTemplates Name="MoveToFrontDown">
    <Algorithm Name="FrontUp">
      <Description>Move edge from Front Up</Description>
      <InitialState>FrontUp* C1 C2</InitialState>
      <Moves>M</Moves>
    </Algorithm>

    <Algorithm Name="BackUp">
      <Description>Move edge from Back Up</Description>
      <InitialState>UpBack* C1 C2</InitialState>
      <Moves>M2</Moves>
    </Algorithm>

    <Algorithm Name="RightUp">
      <Description>Move edge from Right Up</Description>
      <InitialState>RightUp* C1 C2</InitialState>
      <Moves>U M, U' M2</Moves>
    </Algorithm>

    <Algorithm Name="LeftUp">
      <Description>Move edge from Left Up</Description>
      <InitialState>LeftUp* C1 C2</InitialState>
      <Moves>U M2, U' M</Moves>
    </Algorithm>

    <Algorithm Name="FrontLeft">
      <Description>Move edge from Front Left</Description>
      <InitialState>FrontLeft* C1 C2, !{Blocks.RightFrontSolved}</InitialState>
      <Moves>F'</Moves>
    </Algorithm>
    <Algorithm Name="FrontLeftSafe">
      <Description>Move edge from Front Left</Description>
      <InitialState>FrontLeft* C1 C2, {Blocks.RightFrontSolved}</InitialState>
      <FinishedState>{Blocks.RightFrontSolved}</FinishedState>
      <Moves>R' F' R, L' U' l, l' U' l, r' F' R</Moves>
    </Algorithm>

    <Algorithm Name="FrontRight">
      <Description>Move edge from front right</Description>
      <InitialState>FrontRight* C1 C2, !{Blocks.LeftFrontSolved}</InitialState>
      <Moves>F</Moves>
    </Algorithm>
    <Algorithm Name="FrontRightSafe">
      <Description>Move edge from front right</Description>
      <InitialState>FrontRight* C1 C2, {Blocks.LeftFrontSolved}</InitialState>
      <FinishedState>{Blocks.LeftFrontSolved}</FinishedState>
      <Moves>R U r', L F L', l F L', r U r'</Moves>
    </Algorithm>

    <Algorithm Name="LeftBack">
      <Description>Move edge from Left Back</Description>
      <InitialState>LeftBack* C1 C2, !{Blocks.RightBackSolved}</InitialState>
      <Moves>B' M2, B M'</Moves>
    </Algorithm>
    <Algorithm Name="LeftBackSafe">
      <Description>Move edge from Left Back</Description>
      <InitialState>LeftBack* C1 C2, {Blocks.RightBackSolved}</InitialState>
      <FinishedState>{Blocks.RightBackSolved}</FinishedState>
      <Moves>L U' L' M</Moves>
    </Algorithm>

    <Algorithm Name="BackRight">
      <Description>Move edge from back right</Description>
      <InitialState>BackRight* C1 C2, !{Blocks.RightBackSolved}</InitialState>
      <Moves>B M2, B' M'</Moves>
    </Algorithm>
    <Algorithm Name="BackRightSafe">
      <Description>Move edge from back right</Description>
      <InitialState>BackRight* C1 C2, {Blocks.RightBackSolved}</InitialState>
      <FinishedState>{Blocks.LeftBackSolved}</FinishedState>
      <Moves>R' U R M</Moves>
    </Algorithm>

    <Algorithm Name="BackDown">
      <Description>Move edge from back down</Description>
      <InitialState>BackDown* C1 C2</InitialState>
      <Moves>M'</Moves>
    </Algorithm>
  </AlgorithmTemplates>

  <Algorithms Name="RedBlueToFrontDown">
    <InitialState>
      {LeftRightDown.Solved},
      !{Blocks.LeftFrontSolved},
      !FrontDown* Blue Orange,
      !FrontDown* Green Red,
      !FrontDown* Green Orange,
      !{Blocks.PairInPositionAtTop Red Blue},
      !{Blocks.PairInPositionAtTop Blue Orange},
      !{Blocks.PairInPositionAtTop Green Red},
      !{Blocks.PairInPositionAtTop Orange Green}
    </InitialState>
    <FinishedState>{LeftRightDown.Solved}, FrontDown* Red Blue</FinishedState>

    <Algorithm Name="FrontUp" Base="MoveToFrontDown.FrontUp Red Blue" />
    <Algorithm Name="BackUp" Base="MoveToFrontDown.BackUp Red Blue" />
    <Algorithm Name="RightUp" Base="MoveToFrontDown.RightUp Red Blue" />
    <Algorithm Name="LeftUp" Base="MoveToFrontDown.LeftUp Red Blue" />
    <Algorithm Name="BackDown" Base="MoveToFrontDown.BackDown Red Blue" />
    <Algorithm Name="FrontLeft" Base="MoveToFrontDown.FrontLeft Red Blue" />
    <Algorithm Name="FrontLeftSafe" Base="MoveToFrontDown.FrontLeftSafe Red Blue" />
    <Algorithm Name="FrontRight" Base="MoveToFrontDown.FrontRight Red Blue" />
    <Algorithm Name="LeftBack" Base="MoveToFrontDown.LeftBack Red Blue" />
    <Algorithm Name="LeftBackSafe" Base="MoveToFrontDown.LeftBackSafe Red Blue" />
    <Algorithm Name="BackRight" Base="MoveToFrontDown.BackRight Red Blue" />
    <Algorithm Name="BackRightSafe" Base="MoveToFrontDown.BackRightSafe Red Blue" />
  </Algorithms>

  <Algorithms Name="BlueOrangeToFrontDown">
    <InitialState>
      {LeftRightDown.Solved},
      !{Blocks.LeftBackSolved},
      !FrontDown* Red Blue,
      !FrontDown* Green Red,
      !FrontDown* Green Orange,
      !{Blocks.PairInPositionAtTop Red Blue},
      !{Blocks.PairInPositionAtTop Blue Orange},
      !{Blocks.PairInPositionAtTop Green Red},
      !{Blocks.PairInPositionAtTop Orange Green}
    </InitialState>
    <FinishedState>{LeftRightDown.Solved}, FrontDown* Blue Orange</FinishedState>

    <Algorithm Name="FrontUp" Base="MoveToFrontDown.FrontUp Blue Orange" />
    <Algorithm Name="BackUp" Base="MoveToFrontDown.BackUp Blue Orange" />
    <Algorithm Name="RightUp" Base="MoveToFrontDown.RightUp Blue Orange" />
    <Algorithm Name="LeftUp" Base="MoveToFrontDown.LeftUp Blue Orange" />
    <Algorithm Name="BackDown" Base="MoveToFrontDown.BackDown Blue Orange" />
    <Algorithm Name="FrontLeft" Base="MoveToFrontDown.FrontLeft Blue Orange" />
    <Algorithm Name="FrontLeftSafe" Base="MoveToFrontDown.FrontLeftSafe Blue Orange" />
    <Algorithm Name="FrontRight" Base="MoveToFrontDown.FrontRight Blue Orange" />
    <Algorithm Name="FrontRightSafe" Base="MoveToFrontDown.FrontRightSafe Blue Orange" />
    <Algorithm Name="LeftBack" Base="MoveToFrontDown.LeftBack Blue Orange" />
    <Algorithm Name="LeftBackSafe" Base="MoveToFrontDown.LeftBackSafe Blue Orange" />
    <Algorithm Name="BackRight" Base="MoveToFrontDown.BackRight Blue Orange" />
  </Algorithms>

  <Algorithms Name="GreenRedToFrontBottom">
    <InitialState>
      {LeftRightDown.Solved},
      !{Blocks.RightFrontSolved},
      !FrontDown* Blue Orange,
      !FrontDown* Red Blue,
      !FrontDown* Green Orange,
      !{Blocks.PairInPositionAtTop Red Blue},
      !{Blocks.PairInPositionAtTop Blue Orange},
      !{Blocks.PairInPositionAtTop Green Red},
      !{Blocks.PairInPositionAtTop Orange Green}
    </InitialState>
    <FinishedState>{LeftRightDown.Solved}, FrontDown* Green Red</FinishedState>

    <Algorithm Name="FrontUp" Base="MoveToFrontDown.FrontUp Green Red" />
    <Algorithm Name="BackUp" Base="MoveToFrontDown.BackUp Green Red" />
    <Algorithm Name="RightUp" Base="MoveToFrontDown.RightUp Green Red" />
    <Algorithm Name="LeftUp" Base="MoveToFrontDown.LeftUp Green Red" />
    <Algorithm Name="BackDown" Base="MoveToFrontDown.BackDown Green Red" />
    <Algorithm Name="FrontLeft" Base="MoveToFrontDown.FrontLeft Green Red" />
    <Algorithm Name="FrontRight" Base="MoveToFrontDown.FrontRight Green Red" />
    <Algorithm Name="FrontRightSafe" Base="MoveToFrontDown.FrontRightSafe Green Red" />
    <Algorithm Name="LeftBack" Base="MoveToFrontDown.LeftBack Green Red" />
    <Algorithm Name="LeftBackSafe" Base="MoveToFrontDown.LeftBackSafe Green Red" />
    <Algorithm Name="BackRight" Base="MoveToFrontDown.BackRight Green Red" />
    <Algorithm Name="BackRightSafe" Base="MoveToFrontDown.BackRight Green Red" />
  </Algorithms>

  <Algorithms Name="OrangeGreenToFrontBottom">
    <InitialState>
      {LeftRightDown.Solved},
      !{Blocks.RightBackSolved},
      !FrontDown* Blue Orange,
      !FrontDown* Red Blue,
      !FrontDown* Green Red,
      !{Blocks.PairInPositionAtTop Red Blue},
      !{Blocks.PairInPositionAtTop Blue Orange},
      !{Blocks.PairInPositionAtTop Green Red},
      !{Blocks.PairInPositionAtTop Orange Green}
    </InitialState>
    <FinishedState>{LeftRightDown.Solved}, FrontDown* Orange Green</FinishedState>

    <Algorithm Name="FrontUp" Base="MoveToFrontDown.FrontUp Orange Green" />
    <Algorithm Name="BackUp" Base="MoveToFrontDown.BackUp Orange Green" />
    <Algorithm Name="RightUp" Base="MoveToFrontDown.RightUp Orange Green" />
    <Algorithm Name="LeftUp" Base="MoveToFrontDown.LeftUp Orange Green" />
    <Algorithm Name="BackDown" Base="MoveToFrontDown.BackDown Orange Green" />
    <Algorithm Name="FrontLeft" Base="MoveToFrontDown.FrontLeft Orange Green" />
    <Algorithm Name="FrontLeftSafe" Base="MoveToFrontDown.FrontLeftSafe Orange Green" />
    <Algorithm Name="FrontRight" Base="MoveToFrontDown.FrontRight Orange Green" />
    <Algorithm Name="FrontRightSafe" Base="MoveToFrontDown.FrontRightSafe Orange Green" />
    <Algorithm Name="LeftBack" Base="MoveToFrontDown.LeftBack Orange Green" />
    <Algorithm Name="BackRight" Base="MoveToFrontDown.BackRight Orange Green" />
    <Algorithm Name="BackRightSafe" Base="MoveToFrontDown.BackRightSafe Orange Green" />
  </Algorithms>

  <AlgorithmTemplates Name="UpFacingOut">
    <Algorithm Name="LeftFrontDown">
      <Description>Move Left Front Down corner to top</Description>
      <InitialState>LeftFrontDown White C1 C2</InitialState>
      <Moves>L' U2 L</Moves>
    </Algorithm>
    <Algorithm Name="FrontLeftDown">
      <Description>Move Front Left Down corner to top</Description>
      <InitialState>FrontLeftDown White C1 C2</InitialState>
      <Moves>F U F'</Moves>
    </Algorithm>
    <Algorithm Name="DownLeftFront">
      <Description>Move Down Front Left corner to top</Description>
      <InitialState>DownLeftFront White C1 C2</InitialState>
      <Moves>L' U' L</Moves>
    </Algorithm>

    <Algorithm Name="RightFrontDown">
      <Description>Move Right Front Down corner to top</Description>
      <InitialState>RightFrontDown White C1 C2</InitialState>
      <Moves>R U2 R'</Moves>
    </Algorithm>
    <Algorithm Name="FrontRightDown">
      <Description>Move Front Right Down corner to top</Description>
      <InitialState>FrontRightDown White C1 C2</InitialState>
      <Moves>F' U' F</Moves>
    </Algorithm>
    <Algorithm Name="DownRightFront">
      <Description>Move Down Front Right corner to top</Description>
      <InitialState>DownRightFront White C1 C2</InitialState>
      <Moves>R U R'</Moves>
    </Algorithm>

    <Algorithm Name="LeftBackDown">
      <Description>Move Left Back Down corner to top</Description>
      <InitialState>LeftBackDown White C1 C2</InitialState>
      <Moves>L U2 L'</Moves>
    </Algorithm>
    <Algorithm Name="BackLeftDown">
      <Description>Move Back Left Down corner to top</Description>
      <InitialState>BackLeftDown White C1 C2</InitialState>
      <Moves>L U' L'</Moves>
    </Algorithm>
    <Algorithm Name="DownLeftBack">
      <Description>Move Down Back Left corner to top</Description>
      <InitialState>DownLeftBack White C1 C2</InitialState>
      <Moves>L U L'</Moves>
    </Algorithm>

    <Algorithm Name="RightBackDown">
      <Description>Move Right Back Down corner to top</Description>
      <InitialState>RightBackDown White C1 C2</InitialState>
      <Moves>R' U2 R</Moves>
    </Algorithm>
    <Algorithm Name="BackRightDown">
      <Description>Move Back Down Right corner to top</Description>
      <InitialState>BackRightDown White C1 C2</InitialState>
      <Moves>R' U R U</Moves>
    </Algorithm>
    <Algorithm Name="DownRightBack">
      <Description>Move Down Back Right corner to top</Description>
      <InitialState>DownRightBack White C1 C2</InitialState>
      <Moves>R' U' R</Moves>
    </Algorithm>

    <Algorithm Name="AlreadyAtTop">
      <Description>Rotate white corner out facing out</Description>
      <InitialState>
        <Or>
          <State>BackLeftUp White C1 C2</State>
          <State>BackRightUp White C1 C2</State>
          <State>FrontLeftUp White C1 C2</State>
          <State>FrontRightUp White C1 C2</State>
        </Or>
      </InitialState>
      <Moves>U, U'</Moves>
    </Algorithm>

    <Algorithm Name="UpLeftFront_LeftFrontNotSolved">
      <Description>Rotate white Left Front Up corner out</Description>
      <InitialState>UpLeftFront White C1 C2, !{Blocks.LeftFrontSolved}</InitialState>
      <Moves>L' U L</Moves>
    </Algorithm>
    <Algorithm Name="UpLeftFront_RightFrontNotSolved">
      <Description>Rotate white Left Front Up corner out</Description>
      <InitialState>UpLeftFront White C1 C2, !{Blocks.RightFrontSolved}</InitialState>
      <Moves>U' R U' R'</Moves>
    </Algorithm>
    <Algorithm Name="UpLeftFront_LeftBackNotSolved">
      <Description>Rotate white Left Front Up corner out</Description>
      <InitialState>UpLeftFront White C1 C2, !{Blocks.LeftBackSolved}</InitialState>
      <Moves>U L U' L'</Moves>
    </Algorithm>
    <Algorithm Name="UpLeftFront_RightBackNotSolved">
      <Description>Rotate white Left Front Up corner out</Description>
      <InitialState>UpLeftFront White C1 C2, !{Blocks.RightBackSolved}</InitialState>
      <Moves>U2 R' U R</Moves>
    </Algorithm>

    <Algorithm Name="UpLeftBack_LeftFrontNotSolved">
      <Description>Rotate white Left Back Up corner out</Description>
      <InitialState>UpLeftBack White C1 C2, !{Blocks.LeftFrontSolved}</InitialState>
      <Moves>U' L' U L</Moves>
    </Algorithm>
    <Algorithm Name="UpLeftBack_RightFrontNotSolved">
      <Description>Rotate white Left Back Up corner out</Description>
      <InitialState>UpLeftBack White C1 C2, !{Blocks.RightFrontSolved}</InitialState>
      <Moves>U2 R U' R'</Moves>
    </Algorithm>
    <Algorithm Name="UpLeftBack_LeftBackNotSolved">
      <Description>Rotate white Left Back Up corner out</Description>
      <InitialState>UpLeftBack White C1 C2, !{Blocks.LeftBackSolved}</InitialState>
      <Moves>L U' L'</Moves>
    </Algorithm>
    <Algorithm Name="UpLeftBack_RightBackNotSolved">
      <Description>Rotate white Left Back Up corner out</Description>
      <InitialState>UpLeftBack White C1 C2, !{Blocks.RightBackSolved}</InitialState>
      <Moves>U R U R'</Moves>
    </Algorithm>

    <Algorithm Name="UpRightBack_LeftFrontNotSolved">
      <Description>Rotate white Right Back Up corner out</Description>
      <InitialState>UpRightBack White C1 C2, !{Blocks.LeftFrontSolved}</InitialState>
      <Moves>U2 R' U R</Moves>
    </Algorithm>
    <Algorithm Name="UpRightBack_RightFrontNotSolved">
      <Description>Rotate white Right Back Up corner out</Description>
      <InitialState>UpRightBack White C1 C2, !{Blocks.RightFrontSolved}</InitialState>
      <Moves>U R U' R'</Moves>
    </Algorithm>
    <Algorithm Name="UpRightBack_LeftBackNotSolved">
      <Description>Rotate white Right Back Up corner out</Description>
      <InitialState>UpRightBack White C1 C2, !{Blocks.LeftBackSolved}</InitialState>
      <Moves>U R' U' R</Moves>
    </Algorithm>
    <Algorithm Name="UpRightBack_RightBackNotSolved">
      <Description>Rotate white Right Back Up corner out</Description>
      <InitialState>UpRightBack White C1 C2, !{Blocks.RightBackSolved}</InitialState>
      <Moves>R' U R</Moves>
    </Algorithm>

    <Algorithm Name="UpRightFront_LeftFrontNotSolved">
      <Description>Rotate white Right Front Up corner out</Description>
      <InitialState>UpRightFront White C1 C2, !{Blocks.LeftFrontSolved}</InitialState>
      <Moves>U L' U L</Moves>
    </Algorithm>
    <Algorithm Name="UpRightFront_RightFrontNotSolved">
      <Description>Rotate white Right Front Up corner out</Description>
      <InitialState>UpRightFront White C1 C2, !{Blocks.RightFrontSolved}</InitialState>
      <Moves>R U' R'</Moves>
    </Algorithm>
    <Algorithm Name="UpRightFront_LeftBackNotSolved">
      <Description>Rotate white Right Front Up corner out</Description>
      <InitialState>UpRightFront White C1 C2, !{Blocks.LeftBackSolved}</InitialState>
      <Moves>U2 L U' L'</Moves>
    </Algorithm>
    <Algorithm Name="UpRightFront_RightBackNotSolved">
      <Description>Rotate white Right Front Up corner out</Description>
      <InitialState>UpRightFront White C1 C2, !{Blocks.RightBackSolved}</InitialState>
      <Moves>U' R' U R'</Moves>
    </Algorithm>
  </AlgorithmTemplates>

  <Algorithms Name="WhiteRedBlueCornerToTopFacingOut">
    <InitialState>{Blocks.SpecificFrontDownPieceInPosition Red Blue}, !{Blocks.TopCornerWhitePointingOut Red Blue}</InitialState>
    <FinishedState>{Blocks.ReadyToJoinPairAtTop Red Blue}</FinishedState>

    <Algorithm Name="LeftFrontDown" Base="UpFacingOut.LeftFrontDown Red Blue" />
    <Algorithm Name="FrontLeftDown" Base="UpFacingOut.FrontLeftDown Red Blue" />
    <Algorithm Name="DownLeftFront" Base="UpFacingOut.DownLeftFront Red Blue" />

    <Algorithm Name="RightFrontDown" Base="UpFacingOut.RightFrontDown Red Blue" />
    <Algorithm Name="FrontRightDown" Base="UpFacingOut.FrontRightDown Red Blue" />
    <Algorithm Name="DownRightFront" Base="UpFacingOut.DownRightFront Red Blue" />

    <Algorithm Name="LeftBackDown" Base="UpFacingOut.LeftBackDown Red Blue" />
    <Algorithm Name="BackLeftDown" Base="UpFacingOut.BackLeftDown Red Blue" />
    <Algorithm Name="DownLeftBack" Base="UpFacingOut.DownLeftBack Red Blue" />

    <Algorithm Name="RightBackDown" Base="UpFacingOut.RightBackDown Red Blue" />
    <Algorithm Name="BackRightDown" Base="UpFacingOut.BackRightDown Red Blue" />
    <Algorithm Name="DownRightBack" Base="UpFacingOut.DownRightBack Red Blue" />

    <Algorithm Name="AlreadyAtTop" Base="UpFacingOut.AlreadyAtTop Red Blue" />

    <Algorithm Name="UpLeftFront" Base="UpFacingOut.UpLeftFront_LeftFrontNotSolved Red Blue" />

    <Algorithm Name="UpRightFront" Base="UpFacingOut.UpRightFront_LeftFrontNotSolved Red Blue" />

    <Algorithm Name="UpLeftBack" Base="UpFacingOut.UpLeftBack_LeftFrontNotSolved Red Blue" />

    <Algorithm Name="UpRightBack" Base="UpFacingOut.UpRightBack_LeftFrontNotSolved Red Blue" />
  </Algorithms>

  <Algorithms Name="WhiteBlueOrangeCornerToTopFacingOut">
    <InitialState>{Blocks.SpecificFrontDownPieceInPosition Blue Orange}, !{Blocks.TopCornerWhitePointingOut Blue Orange}</InitialState>
    <FinishedState>{Blocks.ReadyToJoinPairAtTop Blue Orange}</FinishedState>

    <Algorithm Name="LeftFrontDown" Base="UpFacingOut.LeftFrontDown Blue Orange" />
    <Algorithm Name="FrontLeftDown" Base="UpFacingOut.FrontLeftDown Blue Orange" />
    <Algorithm Name="DownLeftFront" Base="UpFacingOut.DownLeftFront Blue Orange" />

    <Algorithm Name="RightFrontDown" Base="UpFacingOut.RightFrontDown Blue Orange" />
    <Algorithm Name="FrontRightDown" Base="UpFacingOut.FrontRightDown Blue Orange" />
    <Algorithm Name="DownRightFront" Base="UpFacingOut.DownRightFront Blue Orange" />

    <Algorithm Name="LeftBackDown" Base="UpFacingOut.LeftBackDown Blue Orange" />
    <Algorithm Name="BackLeftDown" Base="UpFacingOut.BackLeftDown Blue Orange" />
    <Algorithm Name="DownLeftBack" Base="UpFacingOut.DownLeftBack Blue Orange" />

    <Algorithm Name="RightBackDown" Base="UpFacingOut.RightBackDown Blue Orange" />
    <Algorithm Name="BackRightDown" Base="UpFacingOut.BackRightDown Blue Orange" />
    <Algorithm Name="DownRightBack" Base="UpFacingOut.DownRightBack Blue Orange" />

    <Algorithm Name="AlreadyAtTop" Base="UpFacingOut.AlreadyAtTop Blue Orange" />

    <Algorithm Name="UpLeftFront" Base="UpFacingOut.UpLeftFront_LeftBackNotSolved Blue Orange" />

    <Algorithm Name="UpRightFront" Base="UpFacingOut.UpRightFront_LeftBackNotSolved Blue Orange" />

    <Algorithm Name="UpLeftBack" Base="UpFacingOut.UpLeftBack_LeftBackNotSolved Blue Orange" />

    <Algorithm Name="UpRightBack" Base="UpFacingOut.UpRightBack_LeftBackNotSolved Blue Orange" />
  </Algorithms>

  <Algorithms Name="WhiteGreenRedCornerToTopFacingOut">
    <InitialState>{Blocks.SpecificFrontDownPieceInPosition Green Red}, !{Blocks.TopCornerWhitePointingOut Green Red}</InitialState>
    <FinishedState>{Blocks.ReadyToJoinPairAtTop Green Red}</FinishedState>

    <Algorithm Name="LeftFrontDown" Base="UpFacingOut.LeftFrontDown Green Red" />
    <Algorithm Name="FrontLeftDown" Base="UpFacingOut.FrontLeftDown Green Red" />
    <Algorithm Name="DownLeftFront" Base="UpFacingOut.DownLeftFront Green Red" />

    <Algorithm Name="RightFrontDown" Base="UpFacingOut.RightFrontDown Green Red" />
    <Algorithm Name="FrontRightDown" Base="UpFacingOut.FrontRightDown Green Red" />
    <Algorithm Name="DownRightFront" Base="UpFacingOut.DownRightFront Green Red" />

    <Algorithm Name="LeftBackDown" Base="UpFacingOut.LeftBackDown Green Red" />
    <Algorithm Name="BackLeftDown" Base="UpFacingOut.BackLeftDown Green Red" />
    <Algorithm Name="DownLeftBack" Base="UpFacingOut.DownLeftBack Green Red" />

    <Algorithm Name="RightBackDown" Base="UpFacingOut.RightBackDown Green Red" />
    <Algorithm Name="BackRightDown" Base="UpFacingOut.BackRightDown Green Red" />
    <Algorithm Name="DownRightBack" Base="UpFacingOut.DownRightBack Green Red" />

    <Algorithm Name="AlreadyAtTop" Base="UpFacingOut.AlreadyAtTop Green Red" />

    <Algorithm Name="UpLeftFront" Base="UpFacingOut.UpLeftFront_RightFrontNotSolved Green Red" />

    <Algorithm Name="UpRightFront" Base="UpFacingOut.UpRightFront_RightFrontNotSolved Green Red" />

    <Algorithm Name="UpLeftBack" Base="UpFacingOut.UpLeftBack_RightFrontNotSolved Green Red" />

    <Algorithm Name="UpRightBack" Base="UpFacingOut.UpRightBack_RightFrontNotSolved Green Red" />
  </Algorithms>

  <Algorithms Name="WhiteOrangeGreenCornerToTopFacingOut">
    <InitialState>{Blocks.SpecificFrontDownPieceInPosition Orange Green}, !{Blocks.TopCornerWhitePointingOut Orange Green}</InitialState>
    <FinishedState>{Blocks.ReadyToJoinPairAtTop Orange Green}</FinishedState>

    <Algorithm Name="LeftFrontDown" Base="UpFacingOut.LeftFrontDown Orange Green" />
    <Algorithm Name="FrontLeftDown" Base="UpFacingOut.FrontLeftDown Orange Green" />
    <Algorithm Name="DownLeftFront" Base="UpFacingOut.DownLeftFront Orange Green" />

    <Algorithm Name="RightFrontDown" Base="UpFacingOut.RightFrontDown Orange Green" />
    <Algorithm Name="FrontRightDown" Base="UpFacingOut.FrontRightDown Orange Green" />
    <Algorithm Name="DownRightFront" Base="UpFacingOut.DownRightFront Orange Green" />

    <Algorithm Name="LeftBackDown" Base="UpFacingOut.LeftBackDown Orange Green" />
    <Algorithm Name="BackLeftDown" Base="UpFacingOut.BackLeftDown Orange Green" />
    <Algorithm Name="DownLeftBack" Base="UpFacingOut.DownLeftBack Orange Green" />

    <Algorithm Name="RightBackDown" Base="UpFacingOut.RightBackDown Orange Green" />
    <Algorithm Name="BackRightDown" Base="UpFacingOut.BackRightDown Orange Green" />
    <Algorithm Name="DownRightBack" Base="UpFacingOut.DownRightBack Orange Green" />

    <Algorithm Name="AlreadyAtTop" Base="UpFacingOut.AlreadyAtTop Orange Green" />

    <Algorithm Name="UpLeftFront" Base="UpFacingOut.UpLeftFront_RightBackNotSolved Orange Green" />

    <Algorithm Name="UpRightFront" Base="UpFacingOut.UpRightFront_RightBackNotSolved Orange Green" />

    <Algorithm Name="UpLeftBack" Base="UpFacingOut.UpLeftBack_RightBackNotSolved Orange Green" />

    <Algorithm Name="UpRightBack" Base="UpFacingOut.UpRightBack_RightBackNotSolved Orange Green" />
  </Algorithms>

  <AlgorithmTemplates Name="JoinLeftPair">
    <Algorithm Name="FrontUp">
      <Description>Join pair at top</Description>
      <InitialState>LeftFrontUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>M'</Moves>
    </Algorithm>

    <Algorithm Name="FrontUpFlip">
      <Description>Join pair at top</Description>
      <InitialState>LeftFrontUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>U2 M2</Moves>
    </Algorithm>

    <Algorithm Name="BackUp">
      <Description>Join pair at top</Description>
      <InitialState>LeftBackUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>M2</Moves>
    </Algorithm>

    <Algorithm Name="BackUpFlip">
      <Description>Join pair at top</Description>
      <InitialState>LeftBackUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>U2 M'</Moves>
    </Algorithm>
  </AlgorithmTemplates>

  <AlgorithmTemplates Name="JoinRightPair">
    <Algorithm Name="FrontUp">
      <Description>Join pair at top</Description>
      <InitialState>RightFrontUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>M'</Moves>
    </Algorithm>

    <Algorithm Name="FrontUpFlip">
      <Description>Join pair at top</Description>
      <InitialState>RightFrontUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>U2 M2</Moves>
    </Algorithm>

    <Algorithm Name="BackUp">
      <Description>Join pair at top</Description>
      <InitialState>RightBackUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>M2</Moves>
    </Algorithm>

    <Algorithm Name="BackUpFlip">
      <Description>Join pair at top</Description>
      <InitialState>RightBackUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>U2 M'</Moves>
    </Algorithm>
  </AlgorithmTemplates>

  <Algorithms Name="JoinFrontDownToRedBlueTopCorner">
    <InitialState>
      {LeftRightDown.Solved},
      {Blocks.ReadyToJoinPairAtTop Red Blue},
      !{Blocks.PairInPositionAtTop Blue Orange},
      !{Blocks.PairInPositionAtTop Green Red},
      !{Blocks.PairInPositionAtTop Orange Green}
    </InitialState>
    <FinishedState>{LeftRightDown.Solved}, {Blocks.PairInPositionAtTop Red Blue}</FinishedState>

    <Algorithm Name="LeftFrontUp" Base="JoinLeftPair.FrontUp Red Blue" />
    <Algorithm Name="LeftFrontUpFlip" Base="JoinLeftPair.FrontUpFlip Red Blue" />

    <Algorithm Name="RightFrontUp" Base="JoinRightPair.FrontUp Red Blue" />
    <Algorithm Name="RightFrontUpFlip" Base="JoinRightPair.FrontUpFlip Red Blue" />

    <Algorithm Name="LeftBackUpFlip" Base="JoinLeftPair.BackUpFlip Red Blue" />
    <Algorithm Name="LeftBackUp" Base="JoinLeftPair.BackUp Red Blue" />

    <Algorithm Name="RightBackUp" Base="JoinRightPair.BackUp Red Blue" />
    <Algorithm Name="RightBackUpFlip" Base="JoinRightPair.BackUpFlip Red Blue" />
  </Algorithms>

  <Algorithms Name="JoinFrontDownToBlueOrangeTopCorner">
    <InitialState>
      {LeftRightDown.Solved},
      {Blocks.ReadyToJoinPairAtTop Blue Orange},
      !{Blocks.PairInPositionAtTop Red Blue},
      !{Blocks.PairInPositionAtTop Green Red},
      !{Blocks.PairInPositionAtTop Orange Green}
    </InitialState>
    <FinishedState>{LeftRightDown.Solved}, {Blocks.PairInPositionAtTop Blue Orange}</FinishedState>

    <Algorithm Name="LeftFrontUp" Base="JoinLeftPair.FrontUp Blue Orange" />
    <Algorithm Name="LeftFrontUpFlip" Base="JoinLeftPair.FrontUpFlip Blue Orange" />

    <Algorithm Name="RightFrontUp" Base="JoinRightPair.FrontUp Blue Orange" />
    <Algorithm Name="RightFrontUpFlip" Base="JoinRightPair.FrontUpFlip Blue Orange" />

    <Algorithm Name="LeftBackUpFlip" Base="JoinLeftPair.BackUpFlip Blue Orange" />
    <Algorithm Name="LeftBackUp" Base="JoinLeftPair.BackUp Blue Orange" />

    <Algorithm Name="RightBackUp" Base="JoinRightPair.BackUp Blue Orange" />
    <Algorithm Name="RightBackUpFlip" Base="JoinRightPair.BackUpFlip Blue Orange" />
  </Algorithms>

  <Algorithms Name="JoinFrontDownToGreenRedTopCorner">
    <InitialState>
      {LeftDown.Solved},
      {Blocks.ReadyToJoinPairAtTop Green Red},
      !{Blocks.PairInPositionAtTop Blue Orange},
      !{Blocks.PairInPositionAtTop Red Blue},
      !{Blocks.PairInPositionAtTop Orange Green}
    </InitialState>
    <FinishedState>{LeftDown.Solved}, {Blocks.PairInPositionAtTop Green Red}</FinishedState>

    <Algorithm Name="LeftFrontUp" Base="JoinLeftPair.FrontUp Green Red" />
    <Algorithm Name="LeftFrontUpFlip" Base="JoinLeftPair.FrontUpFlip Green Red" />

    <Algorithm Name="RightFrontUp" Base="JoinRightPair.FrontUp Green Red" />
    <Algorithm Name="RightFrontUpFlip" Base="JoinRightPair.FrontUpFlip Green Red" />

    <Algorithm Name="LeftBackUp" Base="JoinLeftPair.BackUpFlip Green Red" />
    <Algorithm Name="LeftBackUpFlip" Base="JoinLeftPair.BackUp Green Red" />

    <Algorithm Name="RightBackUp" Base="JoinRightPair.BackUp Green Red" />
    <Algorithm Name="RightBackUpFlip" Base="JoinRightPair.BackUpFlip Green Red" />
  </Algorithms>

  <Algorithms Name="JoinFrontDownToOrangeGreenTopCorner">
    <InitialState>
      {LeftDown.Solved},
      {Blocks.ReadyToJoinPairAtTop Orange Green},
      !{Blocks.PairInPositionAtTop Blue Orange},
      !{Blocks.PairInPositionAtTop Green Red},
      !{Blocks.PairInPositionAtTop Red Blue}
    </InitialState>
    <FinishedState>{LeftDown.Solved}, {Blocks.PairInPositionAtTop Orange Green}</FinishedState>

    <Algorithm Name="LeftFrontUp" Base="JoinLeftPair.FrontUp Orange Green" />
    <Algorithm Name="LeftFrontUpFlip" Base="JoinLeftPair.FrontUpFlip Orange Green" />

    <Algorithm Name="RightFrontUp" Base="JoinRightPair.FrontUp Orange Green" />
    <Algorithm Name="RightFrontUpFlip" Base="JoinRightPair.FrontUpFlip Orange Green" />

    <Algorithm Name="LeftBackUp" Base="JoinLeftPair.BackUp Orange Green" />
    <Algorithm Name="LeftBackUpFlip" Base="JoinLeftPair.BackUpFlip Orange Green" />

    <Algorithm Name="RightBackUp" Base="JoinRightPair.BackUp Orange Green" />
    <Algorithm Name="RightBackUpFlip" Base="JoinRightPair.BackUpFlip Orange Green" />
  </Algorithms>

  <Algorithms Name="PairToLeftFront">
    <InitialState>{LeftRightDown.Solved}, {Blocks.PairInPositionAtTop Red Blue}</InitialState>
    <FinishedState>{LeftRightDown.Solved}, {Blocks.LeftFrontSolved}</FinishedState>

    <Algorithm Name="LeftFrontUp">
      <Description>Pair to Left Front</Description>
      <InitialState>LeftFrontUp White Red Blue, FrontUp Red Blue, !{Blocks.RightFrontSolved}</InitialState>
      <Moves>F'</Moves>
    </Algorithm>
    <Algorithm Name="LeftFrontUpSafe">
      <Description>Pair to Left Front</Description>
      <InitialState>LeftFrontUp White Red Blue, FrontUp Red Blue, {Blocks.RightFrontSolved}</InitialState>
      <FinishedState>{Blocks.RightFrontSolved}</FinishedState>
      <Moves>l' U' L, l' U' l</Moves>
    </Algorithm>

    <Algorithm Name="RightFrontUp">
      <Description>Pair to Left Front</Description>
      <InitialState>RightFrontUp White Red Blue, FrontUp Blue Red</InitialState>
      <Moves>L' U L, L' U l</Moves>
    </Algorithm>

    <Algorithm Name="LeftBackUp">
      <Description>Pair to Left Front</Description>
      <InitialState>LeftBackUp White Red Blue, BackUp Blue Red</InitialState>
      <Moves>U2 L' U L, U2 L' U l</Moves>
    </Algorithm>

    <Algorithm Name="RightBackUp">
      <Description>Pair to Left Front</Description>
      <InitialState>RightBackUp White Red Blue, BackUp Red Blue, !{Blocks.RightFrontSolved}</InitialState>
      <Moves>U2 F'</Moves>
    </Algorithm>
    <Algorithm Name="RightBackUpSafe">
      <Description>Pair to Left Front</Description>
      <InitialState>RightBackUp White Red Blue, BackUp Red Blue, {Blocks.RightFrontSolved}</InitialState>
      <FinishedState>{Blocks.RightFrontSolved}</FinishedState>
      <Moves>U2 l' U' L, U2 l' U' l</Moves>
    </Algorithm>
  </Algorithms>

  <Algorithms Name="PairToLeftBack">
    <InitialState>{LeftRightDown.Solved}, {Blocks.PairInPositionAtTop Blue Orange}</InitialState>
    <FinishedState>{LeftRightDown.Solved}, {Blocks.LeftBackSolved}</FinishedState>

    <Algorithm Name="LeftFrontUp">
      <Description>Pair to Left Back</Description>
      <InitialState>LeftFrontUp White Blue Orange, UpFront Orange Blue</InitialState>
      <Moves>U2 L U' L'</Moves>
    </Algorithm>

    <Algorithm Name="RightFrontUp">
      <Description>Pair to Left Front</Description>
      <InitialState>RightFrontUp White Blue Orange, UpFront Blue Orange, !{Blocks.RightBackSolved}</InitialState>
      <Moves>U2 B</Moves>
    </Algorithm>
    <Algorithm Name="RightFrontUpSafe">
      <Description>Pair to Left Front</Description>
      <InitialState>RightFrontUp White Blue Orange, UpFront Blue Orange, {Blocks.RightBackSolved}</InitialState>
      <FinishedState>{Blocks.RightBackSolved}</FinishedState>
      <Moves>B' U2 B, U2 l U l', U2 l U L'</Moves>
    </Algorithm>

    <Algorithm Name="LeftBackUp">
      <Description>Pair to Left Front</Description>
      <InitialState>LeftBackUp White Blue Orange, BackUp Orange Blue, !{Blocks.RightBackSolved}</InitialState>
      <Moves>B</Moves>
    </Algorithm>
    <Algorithm Name="LeftBackUpSafe">
      <Description>Pair to Left Front</Description>
      <InitialState>LeftBackUp White Blue Orange, BackUp Orange Blue, {Blocks.RightBackSolved}</InitialState>
      <FinishedState>{Blocks.RightBackSolved}</FinishedState>
      <Moves>l U L', l U l', R B R', R B r'</Moves>
    </Algorithm>

    <Algorithm Name="RightBackUp">
      <Description>Pair to Left Front</Description>
      <InitialState>RightBackUp White Blue Orange, BackUp Blue Orange</InitialState>
      <Moves>L U' L', L U' l', r B' R', r B' r'</Moves>
    </Algorithm>
  </Algorithms>

  <Algorithms Name="PairToRightFront">
    <InitialState>{LeftRightDown.Solved}, {Blocks.PairInPositionAtTop Green Red}</InitialState>
    <FinishedState>{LeftRightDown.Solved}, {Blocks.RightFrontSolved}</FinishedState>

    <Algorithm Name="LeftFrontUp">
      <Description>Pair to Right Front</Description>
      <InitialState>LeftFrontUp White Green Red, FrontUp Green Red</InitialState>
      <Moves>R U' R'</Moves>
    </Algorithm>

    <Algorithm Name="RightFrontUp">
      <Description>Pair to Right Front</Description>
      <InitialState>RightFrontUp White Green Red, UpFront Green Red, !{Blocks.LeftFrontSolved}</InitialState>
      <Moves>F</Moves>
    </Algorithm>
    <Algorithm Name="RightFrontUpSafe">
      <Description>Pair to Right Front</Description>
      <InitialState>RightFrontUp White Green Red, UpFront Green Red, {Blocks.LeftFrontSolved}</InitialState>
      <FinishedState>{Blocks.LeftFrontSolved}</FinishedState>
      <Moves>L F L', L F l', r U R', r U r'</Moves>
    </Algorithm>

    <Algorithm Name="LeftBackUp">
      <Description>Pair to Right Front</Description>
      <InitialState>LeftBackUp White Green Red, UpBack Green Red, !{Blocks.LeftFrontSolved}</InitialState>
      <Moves>U2 F</Moves>
    </Algorithm>
    <Algorithm Name="LeftBackUpSafe">
      <Description>Pair to Right Front</Description>
      <InitialState>LeftBackUp White Green Red, UpBack Green Red, {Blocks.LeftFrontSolved}</InitialState>
      <FinishedState>{Blocks.LeftFrontSolved}</FinishedState>
      <Moves>F' U2 F, U2 r U r', U2 r U R'</Moves>
    </Algorithm>

    <Algorithm Name="RightBackUp">
      <Description>Pair to Right Front</Description>
      <InitialState>RightBackUp White Green Red, BackUp Green Red</InitialState>
      <Moves>U2 R U' R', U2 R U' r', U' R U2 R', U' R U2 r', U' r U2 R', U' r U2 r'</Moves>
    </Algorithm>
  </Algorithms>

  <Algorithms Name="PairToRightBack">
    <InitialState>{LeftRightDown.Solved}, {Blocks.PairInPositionAtTop Orange Green}</InitialState>
    <FinishedState>{LeftRightDown.Solved}, {Blocks.RightBackSolved}</FinishedState>

    <Algorithm Name="LeftFrontUp">
      <Description>Pair to Left Back</Description>
      <InitialState>LeftFrontUp White Orange Green, FrontUp Orange Green</InitialState>
      <Moves>U2 r' U' r, U2 r' U' R</Moves>
    </Algorithm>

    <Algorithm Name="RightFrontUp">
      <Description>Pair to Left Back</Description>
      <InitialState>RightFrontUp White Orange Green, UpFront Orange Green</InitialState>
      <Moves>U2 R' U R</Moves>
    </Algorithm>

    <Algorithm Name="LeftBackUp">
      <Description>Pair to Left Back</Description>
      <InitialState>LeftBackUp White Orange Green, UpBack Orange Green</InitialState>
      <Moves>R' U R</Moves>
    </Algorithm>

    <Algorithm Name="RightBackUp">
      <Description>Pair to Left Back</Description>
      <InitialState>RightBackUp White Orange Green, BackUp Orange Green</InitialState>
      <Moves>r' U' R, r' U' r</Moves>
    </Algorithm>
  </Algorithms>

  <!-- Top four corners facing up steps -->

  <States Name="TopCorners">
    <State Name="AllYellowUp">
      UpLeftBack Yellow,
      UpRightBack Yellow,
      UpLeftFront Yellow,
      UpRightFront Yellow
    </State>
    <State Name="Solved">{Blocks.Solved}, {TopCorners.AllYellowUp}</State>
  </States>

  <Algorithms Name="TopCorners">
    <InitialState>{Blocks.Solved}, !{TopCorners.AllYellowUp}</InitialState>
    <FinishedState>{Blocks.Solved}</FinishedState>

    <!--
      If no corners are yellow up then rotate such that the right front corner is yellow pointing forwards.
    -->
    <Algorithm Name="RotateToRightUpFrontFacingOut1">
      <InitialState>!UpLeftBack Yellow, !UpRightBack Yellow, FrontLeftUp Yellow, FrontRightUp Yellow</InitialState>
      <Moves>U'</Moves>
    </Algorithm>
    <Algorithm Name="RotateToRightUpFrontFacingOut3">
      <InitialState>
        <Or>
          <State>!UpLeftBack Yellow, BackRightUp Yellow, !UpLeftFront Yellow, FrontRightUp Yellow</State>
          <State>!UpLeftBack Yellow, BackRightUp Yellow, !UpLeftFront Yellow, RightFrontUp Yellow</State>
        </Or>
      </InitialState>
      <Moves>U</Moves>
    </Algorithm>

    <!-- One corner is yellow up. Rotate so it is in the front right. -->
    <Algorithm Name="RotateSingleYellowCorner1">
      <InitialState>!UpLeftBack Yellow, UpRightBack Yellow, !UpLeftFront Yellow, !UpRightFront Yellow</InitialState>
      <Moves>U</Moves>
    </Algorithm>
    <Algorithm Name="RotateSingleYellowCorner2">
      <InitialState>UpLeftBack Yellow, !UpRightBack Yellow, !UpLeftFront Yellow, !UpRightFront Yellow</InitialState>
      <Moves>U2</Moves>
    </Algorithm>
    <Algorithm Name="RotateSingleYellowCorner3">
      <InitialState>!UpLeftBack Yellow, !UpRightBack Yellow, UpLeftFront Yellow, !UpRightFront Yellow</InitialState>
      <Moves>U'</Moves>
    </Algorithm>

    <!-- If two corners are yellow up on the same side, then rotate so that the RightFrontUp is pointing forwards. -->
    <Algorithm Name="RotateTwoSameSideUp1">
      <InitialState>UpLeftBack Yellow, UpRightBack Yellow, LeftFrontUp Yellow</InitialState>
      <Moves>U'</Moves>
    </Algorithm>
    <Algorithm Name="RotateTwoSameSideUp2">
      <InitialState>
        <Or>
          <State>UpLeftBack Yellow, UpLeftFront Yellow, RightFrontUp Yellow</State>
          <State>UpLeftFront Yellow, UpRightFront Yellow, RightBackUp Yellow</State>
          <State>UpRightFront Yellow, UpRightBack Yellow, LeftFrontUp Yellow</State>
        </Or>
      </InitialState>
      <Moves>U</Moves>
    </Algorithm>
    <Algorithm Name="RotateTwoSameSideUp3">
      <InitialState>
        <Or>
          <State>UpLeftFront Yellow, UpRightFront Yellow, BackLeftUp Yellow</State>
          <State>UpRightFront Yellow, UpRightBack Yellow, BackLeftUp Yellow</State>
        </Or>
      </InitialState>
      <Moves>U2</Moves>
    </Algorithm>

    <!-- If two diagonal corners are yellow up then rotate so that the RightFrontUp is pointing forwards. -->
    <Algorithm Name="RotateTwoDiaganolsUp1">
      <InitialState>UpLeftBack Yellow, FrontLeftUp Yellow, UpRightFront Yellow</InitialState>
      <Moves>U</Moves>
    </Algorithm>
    <Algorithm Name="RotateTwoDiaganolsUp2">
      <InitialState>BackLeftUp Yellow, UpRightBack Yellow, UpLeftFront Yellow</InitialState>
      <Moves>U2</Moves>
    </Algorithm>
    <Algorithm Name="RotateTwoDiaganolsUp3">
      <InitialState>UpLeftBack Yellow, LeftFrontUp Yellow, UpRightFront Yellow</InitialState>
      <Moves>U'</Moves>
    </Algorithm>

    <Algorithm Name="RotateCorners">
      <InitialState>
        <Or>
          <!-- Nothing up. Front right yellow outwards. -->
          <State>!UpLeftBack Yellow, !UpRightBack Yellow, !UpLeftFront Yellow, RightFrontUp Yellow</State>
          <!-- Only front right up. -->
          <State>!UpLeftBack Yellow, !UpRightBack Yellow, !UpLeftFront Yellow, UpRightFront Yellow</State>
          <!-- Two up, same side. -->
          <State>UpLeftBack Yellow, UpRightBack Yellow, FrontRightUp Yellow</State>
          <State>UpLeftBack Yellow, UpLeftFront Yellow, FrontRightUp Yellow</State>
          <!-- Two up, diagonal. -->
          <State>LeftBackUp Yellow, UpRightBack Yellow, FrontRightUp Yellow</State>
        </Or>
      </InitialState>
      <FinishedState>{TopCorners.Solved}</FinishedState>
      <Moves>L' U' L U' L' U2 L</Moves>
    </Algorithm>

    <Algorithm Name="RotateCorners2">
      <InitialState>
        <!-- Need to rotate "backwards". -->
        <State>!UpLeftBack Yellow, !UpRightBack Yellow, LeftFrontUp Yellow, UpRightFront Yellow</State>
      </InitialState>
      <FinishedState>{TopCorners.Solved}</FinishedState>
      <Moves>U R U R' U R U2 R'</Moves>
    </Algorithm>
  </Algorithms>

  <States>
    <State Name="Solved">{TopCorners.Solved}</State>
  </States>
</Solver>