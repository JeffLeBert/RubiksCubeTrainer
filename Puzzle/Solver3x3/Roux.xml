<?xml version="1.0" encoding="utf-8" ?>
<Solver>

  <!-- Left algorithms -->
  
  <States Name="Left">
    <State Name="Solved">Left Blue</State>
  </States>

  <Algorithms Name="MoveBlueCenterToLeft">
    <InitialState>!{Left.Solved}</InitialState>
    <FinishedState>{Left.Solved}</FinishedState>
    
    <Algorithm Name="FromBack">
      <Description>Move blue face from Back to Left</Description>
      <InitialState>Back Blue</InitialState>
      <Moves>y'</Moves>
    </Algorithm>
    <Algorithm Name="FromFront">
      <Description>Move blue face from Front to Left</Description>
      <InitialState>Front Blue</InitialState>
      <Moves>y</Moves>
    </Algorithm>
    <Algorithm Name="FromRight">
      <Description>Move blue face from Right to Left</Description>
      <InitialState>Right Blue</InitialState>
      <Moves>y2</Moves>
    </Algorithm>
    <Algorithm Name="FromUp">
      <Description>Move blue face from Up to Left</Description>
      <InitialState>Up Blue</InitialState>
      <Moves>z'</Moves>
    </Algorithm>
    <Algorithm Name="FromDown">
      <Description>Move blue face from Down to Left</Description>
      <InitialState>Down Blue</InitialState>
      <Moves>z</Moves>
    </Algorithm>
  </Algorithms>

  <!-- LeftDown edge algorithms -->
  
  <States Name="LeftDown">
    <State Name="NotSolved">{Left.Solved}, !LeftDown Blue White</State>
    <State Name="Solved">{Left.Solved}, LeftDown Blue White</State>
  </States>

  <Algorithms Name="LeftDown">
    <InitialState>{LeftDown.NotSolved}</InitialState>
    <FinishedState>{LeftDown.Solved}</FinishedState>

    <Algorithm Name="LeftDown White Blue">
      <Description>Flip down left edge</Description>
      <InitialState>LeftDown White Blue</InitialState>
      <Moves>D F L, D' B' L', L B D, L' F' D'</Moves>
    </Algorithm>
    <Algorithm Name="BackLeft White Blue">
      <Description>Move edge from back left</Description>
      <InitialState>BackLeft White Blue</InitialState>
      <Moves>L'</Moves>
    </Algorithm>
    <Algorithm Name="BackLeft Blue White">
      <Description>Move edit from back left and flip</Description>
      <InitialState>BackLeft Blue White</InitialState>
      <Moves>B D</Moves>
    </Algorithm>
    <Algorithm Name="LeftUp Blue White">
      <Description>Move edge from top left</Description>
      <InitialState>LeftUp Blue White</InitialState>
      <Moves>L2</Moves>
    </Algorithm>
    <Algorithm Name="LeftUp White Blue">
      <Description>Move edge from top left and flip</Description>
      <InitialState>LeftUp White Blue</InitialState>
      <Moves>U B L', U' F' L, L F' D', L' B D</Moves>
    </Algorithm>
    <Algorithm Name="FrontLeft White Blue">
      <Description>Move edge from front left</Description>
      <InitialState>FrontLeft White Blue</InitialState>
      <Moves>L</Moves>
    </Algorithm>
    <Algorithm Name="FrontLeft Blue White">
      <Description>Move edge from front left and flip</Description>
      <InitialState>FrontLeft Blue White</InitialState>
      <Moves>F' D'</Moves>
    </Algorithm>

    <Algorithm Name="BackDown Blue White">
      <Description>Move edge from back bottom</Description>
      <InitialState>BackDown Blue White</InitialState>
      <Moves>D</Moves>
    </Algorithm>
    <Algorithm Name="BackDown White Blue">
      <Description>Move edge from back bottom and flip</Description>
      <InitialState>BackDown White Blue</InitialState>
      <Moves>B' L'</Moves>
    </Algorithm>
    <Algorithm Name="BackUp Blue White">
      <Description>Move edge from back top</Description>
      <InitialState>BackUp Blue White</InitialState>
      <Moves>U' L2, B2 D</Moves>
    </Algorithm>
    <Algorithm Name="BackUp White Blue">
      <Description>Move edge from back top and flip</Description>
      <InitialState>BackUp White Blue</InitialState>
      <Moves>B L'</Moves>
    </Algorithm>
    <Algorithm Name="FrontDown Blue White">
      <Description>Move edge from front bottom</Description>
      <InitialState>FrontDown Blue White</InitialState>
      <Moves>D'</Moves>
    </Algorithm>
    <Algorithm Name="FrontDown White Blue">
      <Description>Move edge from front bottom and flip</Description>
      <InitialState>FrontDown White Blue</InitialState>
      <Moves>F L</Moves>
    </Algorithm>
    <Algorithm Name="FrontUp Blue White">
      <Description>Move edge from front up</Description>
      <InitialState>FrontUp Blue White</InitialState>
      <Moves>F2 D', U L2</Moves>
    </Algorithm>
    <Algorithm Name="FrontUp White Blue">
      <Description>Move edge from front up and flip</Description>
      <InitialState>FrontUp White Blue</InitialState>
      <Moves>F' L</Moves>
    </Algorithm>

    <Algorithm Name="RightDown Blue White">
      <Description>Move edge from right down</Description>
      <InitialState>RightDown Blue White</InitialState>
      <Moves>D2</Moves>
    </Algorithm>
    <Algorithm Name="RightDown White Blue">
      <Description>Move edge from right down and flip</Description>
      <InitialState>RightDown White Blue</InitialState>
      <Moves>R F D', R' B' D, D B' L', D' F L</Moves>
    </Algorithm>
    <Algorithm Name="RightBack White Blue">
      <Description>Move edge from right back</Description>
      <InitialState>RightBack White Blue</InitialState>
      <Moves>B' D</Moves>
    </Algorithm>
    <Algorithm Name="RightBack Blue White">
      <Description>Move edge from right back and flip</Description>
      <InitialState>RightBack Blue White</InitialState>
      <Moves>R D2, B2 L'</Moves>
    </Algorithm>
    <Algorithm Name="RightFront Blue White">
      <Description>Move edge from right front</Description>
      <InitialState>RightFront Blue White</InitialState>
      <Moves>R' D2, F2 L</Moves>
    </Algorithm>
    <Algorithm Name="RightFront White Blue">
      <Description>Move edge from right front and flip</Description>
      <InitialState>RightFront White Blue</InitialState>
      <Moves>F D'</Moves>
    </Algorithm>
    <Algorithm Name="RightUp Blue White">
      <Description>Move edge from right up</Description>
      <InitialState>RightUp Blue White</InitialState>
      <Moves>U2 L2, R2 D2</Moves>
    </Algorithm>
    <Algorithm Name="RightUp White Blue">
      <Description>Move edge from right up</Description>
      <InitialState>RightUp White Blue</InitialState>
      <Moves>U F' L, R B' D, R' F D', U' B L'</Moves>
    </Algorithm>
  </Algorithms>

  <!-- LeftBack and LeftFront pair algorithms -->

  <States>
    <State Name="AFrontDownPieceIsInPosition">
      <Or>
        <State>FrontDown* C1 C2</State>
        <State>FrontDown* C1 C3</State>
      </Or>
    </State>
    <State Name="LeftBlockSpecificFrontDownPieceInPosition">{LeftDown.Solved}, FrontDown* C1 C2</State>
    <State Name="TopCornerWhitePointingOut">
      <Or>
        <State>LeftFrontUp White C1 C2</State>
        <State>RightFrontUp White C1 C2</State>
        <State>LeftBackUp White C1 C2</State>
        <State>RightBackUp White C1 C2</State>
      </Or>
    </State>
    <State Name="BlockPairInPositionAtTop">
      <Or>
        <State>LeftFrontUp White C1 C2, FrontUp C1 C2</State>
        <State>RightBackUp White C1 C2, BackUp C1 C2</State>
        <State>RightFrontUp White C1 C2, FrontUp C2 C1</State>
        <State>LeftBackUp White C1 C2, BackUp C2 C1</State>
      </Or>
    </State>
    <State Name="LeftFrontBlockPairSolved">LeftFront Blue Red, LeftFrontDown Blue White Red</State>
    <State Name="LeftBackBlockPairSolved">LeftBack Blue Orange, LeftBackDown Blue Orange White</State>
  </States>

  <AlgorithmsX>
    <Algorithm Name="FrontUpToFrontDown">
      <Description>Move edge from Front Up</Description>
      <InitialState>FrontUp* C1 C2</InitialState>
      <Moves>M</Moves>
    </Algorithm>

    <Algorithm Name="BackUpToFrontDown">
      <Description>Move edge from Back Up</Description>
      <InitialState>UpBack* C1 C2</InitialState>
      <Moves>M2</Moves>
    </Algorithm>

    <Algorithm Name="RightUpToFrontDown">
      <Description>Move edge from Right Up</Description>
      <InitialState>RightUp* C1 C2</InitialState>
      <Moves>U M</Moves>
    </Algorithm>

    <Algorithm Name="LeftUpToFrontDown">
      <Description>Move edge from Left Up</Description>
      <InitialState>LeftUp* C1 C2</InitialState>
      <Moves>U' M</Moves>
    </Algorithm>

    <Algorithm Name="FrontLeftToFrontDown">
      <Description>Move edge from Front Left</Description>
      <InitialState>FrontLeft* C1 C2</InitialState>
      <Moves>F'</Moves>
    </Algorithm>

    <Algorithm Name="FrontRightToFrontDown">
      <Description>Move edge from front right</Description>
      <InitialState>FrontRight* C1 C2</InitialState>
      <Moves>R U r'</Moves>
    </Algorithm>

    <Algorithm Name="LeftBackToFrontDown">
      <Description>Move edge from Left Back</Description>
      <InitialState>LeftBack* C1 C2</InitialState>
      <Moves>B' M2, B M'</Moves>
    </Algorithm>

    <Algorithm Name="LeftPair_BackRightToFrontDown">
      <Description>Move edge from back right</Description>
      <InitialState>BackRight* C1 C2</InitialState>
      <Moves>B M2, B' M'</Moves>
    </Algorithm>

    <Algorithm Name="RightPair_BackRightToFrontDown">
      <Description>Move edge from back right</Description>
      <InitialState>BackRight* C1 C2</InitialState>
      <Moves>R' U R M</Moves>
    </Algorithm>

    <Algorithm Name="BackDownToFrontDown">
      <Description>Move edge from back down</Description>
      <InitialState>BackDown* C1 C2</InitialState>
      <Moves>M'</Moves>
    </Algorithm>

    <Algorithm Name="RightDownToFrontDown">
      <Description>Move edge from Right Down</Description>
      <InitialState>RightDown* C1 C2</InitialState>
      <Moves>R2 U M</Moves>
    </Algorithm>
  </AlgorithmsX>

  <Step Name="MoveRedBlueToFrontBottom">
    <InitialState>
      {LeftDown.Solved},
      !{LeftFrontBlockPairSolved},
      !{AFrontDownPieceIsInPosition Blue Red Orange},
      !{BlockPairInPositionAtTop Red Blue}
    </InitialState>

    {FrontUpToFrontDown Red Blue},
    {BackUpToFrontDown Red Blue},
    {RightUpToFrontDown Red Blue},
    {LeftUpToFrontDown Red Blue},
    {FrontLeftToFrontDown Red Blue},
    {FrontRightToFrontDown Red Blue},
    {LeftBackToFrontDown Red Blue},
    {LeftPair_BackRightToFrontDown Red Blue},
    {BackDownToFrontDown Red Blue},
    {RightDownToFrontDown Red Blue}

    <FinishedState>{LeftBlockSpecificFrontDownPieceInPosition Red Blue}</FinishedState>
  </Step>

  <Step Name="MoveBlueOrangeToFrontBottom">
    <InitialState>
      {LeftDown.Solved},
      !{LeftBackBlockPairSolved},
      !{AFrontDownPieceIsInPosition Blue Red Orange},
      !{BlockPairInPositionAtTop Blue Orange}
    </InitialState>

    {FrontUpToFrontDown Blue Orange},
    {BackUpToFrontDown Blue Orange},
    {RightUpToFrontDown Blue Orange},
    {LeftUpToFrontDown Blue Orange},
    {FrontLeftToFrontDown Blue Orange},
    {FrontRightToFrontDown Blue Orange},
    {LeftBackToFrontDown Blue Orange},
    {LeftPair_BackRightToFrontDown Blue Orange},
    {BackDownToFrontDown Blue Orange},
    {RightDownToFrontDown Blue Orange}

    <FinishedState>{LeftBlockSpecificFrontDownPieceInPosition Blue Orange}</FinishedState>
  </Step>

  <StatesX>
    <State Name="ReadyToJoinLeftPairAtTop">{LeftBlockSpecificFrontDownPieceInPosition C1 C2}, {TopCornerWhitePointingOut C1 C2}</State>
  </StatesX>

  <AlgorithmsX>
    <Algorithm Name="LeftFrontDownToUpFacingOut1">
      <Description>Move Left Front Down corner to top</Description>
      <InitialState>LeftFrontDown White C1 C2</InitialState>
      <Moves>L' U2 L</Moves>
    </Algorithm>
    <Algorithm Name="LeftFrontDownToUpFacingOut2">
      <Description>Move Front Left Down corner to top</Description>
      <InitialState>FrontLeftDown White C1 C2</InitialState>
      <Moves>F U F'</Moves>
    </Algorithm>
    <Algorithm Name="LeftFrontDownToUpFacingOut3">
      <Description>Move Down Front Left corner to top</Description>
      <InitialState>DownFrontLeft White C1 C2</InitialState>
      <Moves>L' U' L</Moves>
    </Algorithm>

    <Algorithm Name="LeftPairRightFrontDownToUpFacingOut1">
      <Description>Move Right Front Down corner to top</Description>
      <InitialState>RightFrontDown White C1 C2</InitialState>
      <Moves>R U2</Moves>
    </Algorithm>
    <Algorithm Name="LeftPairRightFrontDownToUpFacingOut2">
      <Description>Move Front Right Down corner to top</Description>
      <InitialState>FrontRightDown White C1 C2</InitialState>
      <Moves>F' U' F</Moves>
    </Algorithm>
    <Algorithm Name="LeftPairRightFrontDownToUpFacingOut3">
      <Description>Move Down Front Right corner to top</Description>
      <InitialState>DownFrontRight White C1 C2</InitialState>
      <Moves>R U</Moves>
    </Algorithm>

    <Algorithm Name="LeftBackDownToUpFacingOut1">
      <Description>Move Left Back Down corner to top</Description>
      <InitialState>LeftBackDown White C1 C2</InitialState>
      <Moves>L U2 L'</Moves>
    </Algorithm>
    <Algorithm Name="LeftBackDownToUpFacingOut2">
      <Description>Move Back Left Down corner to top</Description>
      <InitialState>BackLeftDown White C1 C2</InitialState>
      <Moves>B' U'</Moves>
    </Algorithm>
    <Algorithm Name="LeftBackDownToUpFacingOut3">
      <Description>Move Down Back Left corner to top</Description>
      <InitialState>DownBackLeft White C1 C2</InitialState>
      <Moves>B' U2</Moves>
    </Algorithm>

    <Algorithm Name="LeftPairRightBackDownToUpFacingOut1">
      <Description>Move Right Back Down corner to top</Description>
      <InitialState>RightBackDown White C1 C2</InitialState>
      <Moves>R' U2</Moves>
    </Algorithm>
    <Algorithm Name="LeftPairRightBackDownToUpFacingOut2">
      <Description>Move Back Down Right corner to top</Description>
      <InitialState>BackRightDown White C1 C2</InitialState>
      <Moves>R2 U</Moves>
    </Algorithm>
    <Algorithm Name="LeftPairRightBackDownToUpFacingOut3">
      <Description>Move Down Back Right corner to top</Description>
      <InitialState>DownBackRight White C1 C2</InitialState>
      <Moves>R' U'</Moves>
    </Algorithm>

    <Algorithm Name="UpWhiteCornerToFacingOut">
      <Description>Rotate white corner out facing out</Description>
      <InitialState>
        <Or>
          <State>BackLeftUp White C1 C2</State>
          <State>BackRightUp White C1 C2</State>
          <State>FrontLeftUp White C1 C2</State>
          <State>FrontRightUp White C1 C2</State>
        </Or>
      </InitialState>
      <Moves>U, U'</Moves>
    </Algorithm>

    <Algorithm Name="UpFrontLeftToFacingOut">
      <Description>Rotate white Left Front Up corner out</Description>
      <InitialState>UpFrontLeft White C1 C2</InitialState>
      <Moves>U' R U</Moves>
    </Algorithm>

    <Algorithm Name="UpBackLeftToFacingOut">
      <Description>Rotate white Left Back Up corner out</Description>
      <InitialState>UpBackLeft White C1 C2</InitialState>
      <Moves>U R' U</Moves>
    </Algorithm>

    <Algorithm Name="UpBackRightToFacingOut">
      <Description>Rotate white Right Back Up corner out</Description>
      <InitialState>UpBackRight White C1 C2</InitialState>
      <Moves>R' U, R' U'</Moves>
    </Algorithm>

    <Algorithm Name="UpFrontRightToFacingOut">
      <Description>Rotate white Right Front Up corner out</Description>
      <InitialState>UpFrontRight White C1 C2</InitialState>
      <Moves>R U'</Moves>
    </Algorithm>
  </AlgorithmsX>

  <Step Name="MoveWhiteRedBlueCornerToTopFacingOut">
    <InitialState>{LeftBlockSpecificFrontDownPieceInPosition Red Blue}, !{TopCornerWhitePointingOut Red Blue}</InitialState>

    {LeftFrontDownToUpFacingOut1 Red Blue},
    {LeftFrontDownToUpFacingOut2 Red Blue},
    {LeftFrontDownToUpFacingOut3 Red Blue},

    {LeftPairRightFrontDownToUpFacingOut1 Red Blue},
    {LeftPairRightFrontDownToUpFacingOut2 Red Blue},
    {LeftPairRightFrontDownToUpFacingOut3 Red Blue},

    {LeftBackDownToUpFacingOut1 Red Blue},
    {LeftBackDownToUpFacingOut2 Red Blue},
    {LeftBackDownToUpFacingOut3 Red Blue},

    {LeftPairRightBackDownToUpFacingOut1 Red Blue},
    {LeftPairRightBackDownToUpFacingOut2 Red Blue},
    {LeftPairRightBackDownToUpFacingOut3 Red Blue},

    {UpWhiteCornerToFacingOut Red Blue},

    {UpFrontLeftToFacingOut Red Blue},

    {UpFrontRightToFacingOut Red Blue},

    {UpBackLeftToFacingOut Red Blue},

    {UpBackRightToFacingOut Red Blue}

    <FinishedState>{ReadyToJoinLeftPairAtTop Red Blue}</FinishedState>
  </Step>

  <Step Name="MoveWhiteBlueOrangeCornerToTopFacingOut">
    <InitialState>{LeftBlockSpecificFrontDownPieceInPosition Blue Orange}, !{TopCornerWhitePointingOut Blue Orange}</InitialState>

    {LeftFrontDownToUpFacingOut1 Blue Orange},
    {LeftFrontDownToUpFacingOut2 Blue Orange},
    {LeftFrontDownToUpFacingOut3 Blue Orange},

    {LeftPairRightFrontDownToUpFacingOut1 Blue Orange},
    {LeftPairRightFrontDownToUpFacingOut2 Blue Orange},
    {LeftPairRightFrontDownToUpFacingOut3 Blue Orange},

    {LeftBackDownToUpFacingOut1 Blue Orange},
    {LeftBackDownToUpFacingOut2 Blue Orange},
    {LeftBackDownToUpFacingOut3 Blue Orange},

    {LeftPairRightBackDownToUpFacingOut1 Blue Orange},
    {LeftPairRightBackDownToUpFacingOut2 Blue Orange},
    {LeftPairRightBackDownToUpFacingOut3 Blue Orange},

    {UpWhiteCornerToFacingOut Blue Orange},

    {UpFrontLeftToFacingOut Blue Orange},

    {UpFrontRightToFacingOut Blue Orange},

    {UpBackLeftToFacingOut Blue Orange},

    {UpBackRightToFacingOut Blue Orange}

    <FinishedState>{ReadyToJoinLeftPairAtTop Blue Orange}</FinishedState>
  </Step>

  <AlgorithmsX>
    <Algorithm Name="JoinLeftFrontUpPairFlip">
      <Description>Join pair at top</Description>
      <InitialState>LeftFrontUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>U2 M2</Moves>
    </Algorithm>

    <Algorithm Name="JoinLeftFrontUpPair">
      <Description>Join pair at top</Description>
      <InitialState>LeftFrontUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>M'</Moves>
    </Algorithm>

    <Algorithm Name="JoinRightFrontUpPair">
      <Description>Join pair at top</Description>
      <InitialState>RightFrontUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>M'</Moves>
    </Algorithm>

    <Algorithm Name="JoinRightFrontUpPairFlip">
      <Description>Join pair at top</Description>
      <InitialState>RightFrontUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>U2 M2</Moves>
    </Algorithm>

    <Algorithm Name="JoinLeftBackUpPairFlip">
      <Description>Join pair at top</Description>
      <InitialState>LeftBackUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>U2 M'</Moves>
    </Algorithm>

    <Algorithm Name="JoinLeftBackUpPair">
      <Description>Join pair at top</Description>
      <InitialState>LeftBackUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>M2</Moves>
    </Algorithm>

    <Algorithm Name="JoinRightBackUpPair">
      <Description>Join pair at top</Description>
      <InitialState>RightBackUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>M2</Moves>
    </Algorithm>

    <Algorithm Name="JoinRightBackUpPairFlip">
      <Description>Join pair at top</Description>
      <InitialState>RightBackUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>U2 M'</Moves>
    </Algorithm>
  </AlgorithmsX>

  <Step Name="JoinFrontDownToBlueRedTopCorner">
    <InitialState>{ReadyToJoinLeftPairAtTop Red Blue}</InitialState>

    {JoinLeftFrontUpPair Red Blue},
    {JoinLeftFrontUpPairFlip Red Blue},

    {JoinRightFrontUpPair Red Blue},
    {JoinRightFrontUpPairFlip Red Blue},

    {JoinLeftBackUpPairFlip Red Blue},
    {JoinLeftBackUpPair Red Blue},

    {JoinRightBackUpPair Red Blue},
    {JoinRightBackUpPairFlip Red Blue}

    <FinishedState>{LeftDown.Solved}, {BlockPairInPositionAtTop Red Blue}</FinishedState>
  </Step>

  <Step Name="JoinFrontDownToBlueOrangeTopCorner">
    <InitialState>{ReadyToJoinLeftPairAtTop Blue Orange}</InitialState>

    {JoinLeftFrontUpPair Blue Orange},
    {JoinLeftFrontUpPairFlip Blue Orange},

    {JoinRightFrontUpPair Blue Orange},
    {JoinRightFrontUpPairFlip Blue Orange},

    {JoinLeftBackUpPairFlip Blue Orange},
    {JoinLeftBackUpPair Blue Orange},

    {JoinRightBackUpPair Blue Orange},
    {JoinRightBackUpPairFlip Blue Orange}

    <FinishedState>{LeftDown.Solved}, {BlockPairInPositionAtTop Blue Orange}</FinishedState>
  </Step>

  <States>
    <State Name="LeftFrontPairSolved">LeftFront Blue Red, LeftFrontDown Blue White Red</State>
    <State Name="LeftBackPairSolved">LeftBack Blue Orange, LeftBackDown Blue Orange White</State>
  </States>

  <Step Name="PairToLeftFront">
    <InitialState>{LeftDown.Solved}, {BlockPairInPositionAtTop Red Blue}</InitialState>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>LeftFrontUp White Red Blue, FrontUp Red Blue</InitialState>
      <Moves>F'</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>RightFrontUp White Red Blue, FrontUp Blue Red</InitialState>
      <Moves>L' U L</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>LeftBackUp White Red Blue, BackUp Blue Red</InitialState>
      <Moves>U2 L' U L</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>RightBackUp White Red Blue, BackUp Red Blue</InitialState>
      <Moves>U2 F'</Moves>
    </Algorithm>

    <FinishedState>{LeftDown.Solved}, {LeftFrontPairSolved}</FinishedState>
  </Step>

  <Step Name="PairToLeftBack">
    <InitialState>{LeftDown.Solved}, {BlockPairInPositionAtTop Blue Orange}</InitialState>

    <Algorithm>
      <Description>Pair to Left Back</Description>
      <InitialState>LeftFrontUp White Blue Orange, UpFront Orange Blue</InitialState>
      <Moves>U2 L U' L'</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>RightFrontUp White Blue Orange, UpFront Blue Orange</InitialState>
      <Moves>U2 B</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>LeftBackUp White Blue Orange, BackUp Orange Blue</InitialState>
      <Moves>B</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>RightBackUp White Blue Orange, BackUp Blue Orange</InitialState>
      <Moves>L U' L'</Moves>
    </Algorithm>

    <FinishedState>{LeftDown.Solved}, {LeftBackPairSolved}</FinishedState>
  </Step>

  <!-- RightDown algorithms -->

  <States>
    <State Name="LeftBlockSolved">{LeftDown.Solved}, {LeftFrontPairSolved}, {LeftBackPairSolved}</State>
    <State Name="RightBottomEdge">RightDown Green White</State>
    <State Name="RightDownSolved">{LeftBlockSolved}, {RightBottomEdge}</State>
  </States>

  <Step Name="SolveRightDown">
    <InitialState>{LeftBlockSolved}, !{RightBottomEdge}</InitialState>

    <Algorithm>
      <Description>Flip down edge</Description>
      <InitialState>RightDown White Green</InitialState>
      <Moves>R2 U' r' U' R2</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge down</Description>
      <InitialState>RightFront Green White</InitialState>
      <Moves>R'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Flip and move edge down</Description>
      <InitialState>RightFront White Green</InitialState>
      <Moves>R U' r' U' R2</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge down</Description>
      <InitialState>RightBack Green White</InitialState>
      <Moves>R</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Flip and move edge down</Description>
      <InitialState>RightBack White Green</InitialState>
      <Moves>R' U r U R2</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge down</Description>
      <InitialState>RightUp Green White</InitialState>
      <Moves>R2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Flip and move edge down</Description>
      <InitialState>RightUp White Green</InitialState>
      <Moves>U' r' U' R2</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge down</Description>
      <InitialState>FrontUp Green White</InitialState>
      <Moves>U' R2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Flip and move edge down</Description>
      <InitialState>FrontUp White Green</InitialState>
      <Moves>r U R2</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge down</Description>
      <InitialState>BackUp Green White</InitialState>
      <Moves>U R2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Flip and move edge down</Description>
      <InitialState>BackUp White Green</InitialState>
      <Moves>r' U' R2</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge down</Description>
      <InitialState>LeftUp Green White</InitialState>
      <Moves>U2 R2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Flip and move edge down</Description>
      <InitialState>LeftUp White Green</InitialState>
      <Moves>U r' U' R2</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge down</Description>
      <InitialState>FrontDown Green White</InitialState>
      <Moves>r2 U R2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Flip and move edge down</Description>
      <InitialState>FrontDown White Green</InitialState>
      <Moves>r U' R2</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge down</Description>
      <InitialState>BackDown White Green</InitialState>
      <Moves>r' U R2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Flip and move edge down</Description>
      <InitialState>BackDown Green White</InitialState>
      <Moves>r2 U' R2</Moves>
    </Algorithm>

    <FinishedState>{RightDownSolved}</FinishedState>
  </Step>

  <!-- RightBack and RightFront pair algorithms -->
  
  <States>
    <State Name="RightFrontBlockPairSolved">RightFront Green Red, RightFrontDown Green Red White</State>
    <State Name="RightBackBlockPairSolved">RightBack Green Orange, RightBackDown Green White Orange</State>
    <State Name="RightBlockSpecificFrontDownPieceInPosition">{RightDownSolved}, FrontDown* C1 C2</State>
    <State Name="ReadyToJoinRightPairAtTop">{RightBlockSpecificFrontDownPieceInPosition C1 C2}, {TopCornerWhitePointingOut C1 C2}</State>
    <State Name="RightPairJoinedAtTop">{RightDownSolved}, {BlockPairInPositionAtTop C1 C2}</State>
  </States>

  <Step Name="MoveRedGreenToFrontBottom">
    <InitialState>
      {RightDownSolved},
      !{RightFrontBlockPairSolved},
      !{AFrontDownPieceIsInPosition Green Red Orange},
      !{BlockPairInPositionAtTop Green Red}
    </InitialState>

    {FrontUpToFrontDown Green Red},
    {BackUpToFrontDown Green Red},
    {RightUpToFrontDown Green Red},
    {LeftUpToFrontDown Green Red},
    {FrontRightToFrontDown Green Red},
    {RightPair_BackRightToFrontDown Green Red},
    {BackDownToFrontDown Green Red}

    <FinishedState>{RightBlockSpecificFrontDownPieceInPosition Green Red}</FinishedState>
  </Step>

  <Step Name="MoveOrangeGreenToFrontBottom">
    <InitialState>
      {RightDownSolved},
      !{RightBackBlockPairSolved},
      !{AFrontDownPieceIsInPosition Green Red Orange},
      !{BlockPairInPositionAtTop Orange Green}
    </InitialState>

    {FrontUpToFrontDown Orange Green},
    {BackUpToFrontDown Orange Green},
    {RightUpToFrontDown Orange Green},
    {LeftUpToFrontDown Orange Green},
    {FrontRightToFrontDown Orange Green},
    {RightPair_BackRightToFrontDown Orange Green},
    {BackDownToFrontDown Orange Green}

    <FinishedState>{RightBlockSpecificFrontDownPieceInPosition Orange Green}</FinishedState>
  </Step>

  <AlgorithmsX>
    <Algorithm Name="RightPair_RightFrontDownToUpFacingOut1">
      <Description>Move Right Front Down corner to top</Description>
      <InitialState>RightFrontDown White C1 C2</InitialState>
      <Moves>R U2 R'</Moves>
    </Algorithm>
    <Algorithm Name="RightPair_RightFrontDownToUpFacingOut2">
      <Description>Move Front Right Down corner to top</Description>
      <InitialState>FrontRightDown White C1 C2</InitialState>
      <Moves>R U' R' U</Moves>
    </Algorithm>
    <Algorithm Name="RightPair_RightFrontDownToUpFacingOut3">
      <Description>Move Down Front Right corner to top</Description>
      <InitialState>DownFrontRight White C1 C2</InitialState>
      <Moves>R U R'</Moves>
    </Algorithm>

    <Algorithm Name="RightPair_RightBackDownToUpFacingOut1">
      <Description>Move Right Back Down corner to top</Description>
      <InitialState>RightBackDown White C1 C2</InitialState>
      <Moves>R' U2 R</Moves>
    </Algorithm>
    <Algorithm Name="RightPair_RightBackDownToUpFacingOut2">
      <Description>Move Back Down Right corner to top</Description>
      <InitialState>BackRightDown White C1 C2</InitialState>
      <Moves>R' U R U, R' U R U'</Moves>
    </Algorithm>
    <Algorithm Name="RightPair_RightBackDownToUpFacingOut3">
      <Description>Move Down Back Right corner to top</Description>
      <InitialState>DownBackRight White C1 C2</InitialState>
      <Moves>R' U' R</Moves>
    </Algorithm>

    <Algorithm Name="WhiteGreenRed_UpFrontLeftToFacingOut">
      <Description>Rotate white Left Front Up corner out</Description>
      <InitialState>UpFrontLeft White Green Red</InitialState>
      <Moves>U' R U' R'</Moves>
    </Algorithm>

    <Algorithm Name="WhiteOrangeGreen_UpFrontLeftToFacingOut">
      <Description>Rotate white Left Front Up corner out</Description>
      <InitialState>UpFrontLeft White Orange Green</InitialState>
      <Moves>U2 R' U R</Moves>
    </Algorithm>

    <Algorithm Name="WhiteGreenRed_UpFrontRightToFacingOut">
      <Description>Rotate white Right Front Up corner out</Description>
      <InitialState>UpFrontRight White Green Red</InitialState>
      <Moves>R U' R'</Moves>
    </Algorithm>

    <Algorithm Name="WhiteOrangeGreen_UpFrontRightToFacingOut">
      <Description>Rotate white Right Front Up corner out</Description>
      <InitialState>UpFrontRight White Orange Green</InitialState>
      <Moves>U' R' U R</Moves>
    </Algorithm>

    <Algorithm Name="WhiteGreenRed_UpBackLeftToFacingOut">
      <Description>Rotate white Left Back Up corner out</Description>
      <InitialState>UpBackLeft White Green Red</InitialState>
      <Moves>U2 R U' R'</Moves>
    </Algorithm>

    <Algorithm Name="WhiteOrangeGreen_UpBackLeftToFacingOut">
      <Description>Rotate white Left Back Up corner out</Description>
      <InitialState>UpBackLeft White Orange Green</InitialState>
      <Moves>U R' U R</Moves>
    </Algorithm>

    <Algorithm Name="WhiteGreenRed_UpBackRightToFacingOut">
      <Description>Rotate white Right Back Up corner out</Description>
      <InitialState>UpBackRight White Green Red</InitialState>
      <Moves>U R U' R'</Moves>
    </Algorithm>

    <Algorithm Name="WhiteOrangeGreen_UpBackRightToFacingOut">
      <Description>Rotate white Right Back Up corner out</Description>
      <InitialState>UpBackRight White Orange Green</InitialState>
      <Moves>R' U R</Moves>
    </Algorithm>
  </AlgorithmsX>

  <Step Name="MoveWhiteGreenRedCornerToTopFacingOut">
    <InitialState>{RightBlockSpecificFrontDownPieceInPosition Green Red}, !{TopCornerWhitePointingOut Green Red}</InitialState>

    {RightPair_RightFrontDownToUpFacingOut1 Green Red},
    {RightPair_RightFrontDownToUpFacingOut2 Green Red},
    {RightPair_RightFrontDownToUpFacingOut3 Green Red},

    {RightPair_RightBackDownToUpFacingOut1 Green Red},
    {RightPair_RightBackDownToUpFacingOut2 Green Red},
    {RightPair_RightBackDownToUpFacingOut3 Green Red},

    {UpWhiteCornerToFacingOut Green Red},

    {WhiteGreenRed_UpFrontLeftToFacingOut},

    {WhiteGreenRed_UpFrontRightToFacingOut},

    {WhiteGreenRed_UpBackLeftToFacingOut},

    {WhiteGreenRed_UpBackRightToFacingOut}

    <FinishedState>{ReadyToJoinRightPairAtTop Green Red}</FinishedState>
  </Step>

  <Step Name="MoveWhiteOrangeGreenCornerToTopFacingOut">
    <InitialState>{RightBlockSpecificFrontDownPieceInPosition Orange Green}, !{TopCornerWhitePointingOut Orange Green}</InitialState>

    {RightPair_RightFrontDownToUpFacingOut1 Orange Green},
    {RightPair_RightFrontDownToUpFacingOut2 Orange Green},
    {RightPair_RightFrontDownToUpFacingOut3 Orange Green},

    {RightPair_RightBackDownToUpFacingOut1 Orange Green},
    {RightPair_RightBackDownToUpFacingOut2 Orange Green},
    {RightPair_RightBackDownToUpFacingOut3 Orange Green},

    {UpWhiteCornerToFacingOut Orange Green},

    {WhiteOrangeGreen_UpFrontLeftToFacingOut},

    {WhiteOrangeGreen_UpFrontRightToFacingOut},

    {WhiteOrangeGreen_UpBackLeftToFacingOut},

    {WhiteOrangeGreen_UpBackRightToFacingOut}

    <FinishedState>{ReadyToJoinRightPairAtTop Orange Green}</FinishedState>
  </Step>

  <Step Name="JoinFrontDownToGreenRedTopCorner">
    <InitialState>{ReadyToJoinRightPairAtTop Green Red}</InitialState>

    {JoinLeftFrontUpPair Green Red},
    {JoinLeftFrontUpPairFlip Green Red},

    {JoinRightFrontUpPair Green Red},
    {JoinRightFrontUpPairFlip Green Red},

    {JoinLeftBackUpPairFlip Green Red},
    {JoinLeftBackUpPair Green Red},

    {JoinRightBackUpPair Green Red},
    {JoinRightBackUpPairFlip Green Red}

    <FinishedState>{RightPairJoinedAtTop Green Red}</FinishedState>
  </Step>

  <Step Name="JoinFrontDownToOrangeGreenTopCorner">
    <InitialState>{ReadyToJoinRightPairAtTop Orange Green}</InitialState>

    {JoinLeftFrontUpPair Orange Green},
    {JoinLeftFrontUpPairFlip Orange Green},

    {JoinRightFrontUpPair Orange Green},
    {JoinRightFrontUpPairFlip Orange Green},

    {JoinLeftBackUpPairFlip Orange Green},
    {JoinLeftBackUpPair Orange Green},

    {JoinRightBackUpPair Orange Green},
    {JoinRightBackUpPairFlip Orange Green}

    <FinishedState>{RightPairJoinedAtTop Orange Green}</FinishedState>
  </Step>

  <Step Name="PairToRightFront">
    <InitialState>{RightPairJoinedAtTop Green Red}</InitialState>

    <Algorithm>
      <Description>Pair to Right Front</Description>
      <InitialState>LeftFrontUp White Green Red, FrontUp Green Red</InitialState>
      <Moves>R U' R'</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Right Front</Description>
      <InitialState>RightFrontUp White Green Red, UpFront Green Red</InitialState>
      <Moves>r U r', r U R'</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Right Front</Description>
      <InitialState>LeftBackUp White Green Red, UpBack Green Red</InitialState>
      <Moves>U2 r U r', U2 r U R'</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Right Front</Description>
      <InitialState>RightBackUp White Green Red, BackUp Green Red</InitialState>
      <Moves>U2 R U' R'</Moves>
    </Algorithm>

    <FinishedState>{RightDownSolved}, {RightFrontBlockPairSolved}</FinishedState>
  </Step>

  <Step Name="PairToRightBack">
    <InitialState>{RightPairJoinedAtTop Orange Green}</InitialState>

    <Algorithm>
      <Description>Pair to Left Back</Description>
      <InitialState>LeftFrontUp White Orange Green, FrontUp Orange Green</InitialState>
      <Moves>U2 r' U' r, U2 r' U' R</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Back</Description>
      <InitialState>RightFrontUp White Orange Green, UpFront Orange Green</InitialState>
      <Moves>U2 R' U R</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Back</Description>
      <InitialState>LeftBackUp White Orange Green, UpBack Orange Green</InitialState>
      <Moves>R' U R</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Back</Description>
      <InitialState>RightBackUp White Orange Green, BackUp Orange Green</InitialState>
      <Moves>r' U' R, r' U' r</Moves>
    </Algorithm>

    <FinishedState>{RightDownSolved}, {RightBackBlockPairSolved}</FinishedState>
  </Step>
  
  <!-- Top four corners facing up steps -->

  <!--<States>
    <State Name="LeftAndRightBlocksSolved">{RightDownSolved}, {RightFrontBlockPairSolved}, {RightBackBlockPairSolved}</State>
    <State Name="TopCornersFacingUpSolved">
      {LeftAndRightBlocksSolved},
      UpBackLeft Yellow,
      UpBackRight Yellow,
      UpFrontLeft Yellow,
      UpFrontRight Yellow
    </State>
  </States>

  <Step Name="NoTopCornersFacingUp">
    <InitialState>
      {LeftAndRightBlocksSolved},
      !UpBackLeft Yellow,
      !UpBackRight Yellow,
      !UpFrontLeft Yellow,
      !UpFrontRight Yellow
    </InitialState>

    <Algorithm>
      <Description>No corners yellow up</Description>
      <InitialState>RightFrontUp Yellow</InitialState>
      <Moves>L' U' L U' L' U2 L</Moves>
    </Algorithm>

    <Algorithm>
      <Description>No corners yellow up</Description>
      <InitialState>FrontLeftUp Yellow</InitialState>
      <Moves>U' L' U' L U' L' U2 L</Moves>
    </Algorithm>

    <Algorithm>
      <Description>No corners yellow up</Description>
      <InitialState>LeftBackUp Yellow</InitialState>
      <Moves>U2 L' U' L U' L' U2 L</Moves>
    </Algorithm>

    <FinishedState>
      {TopCornersFacingUpSolved}
      <Or>
        <State>UpBackLeft Yellow</State>
        <State>UpBackRight Yellow</State>
        <State>UpFrontLeft Yellow</State>
        <State>UpFrontRight Yellow</State>
      </Or>
    </FinishedState>
  </Step>-->
  
  <States>
    <State Name="Solved">{LeftDown.Solved}</State>
  </States>
</Solver>