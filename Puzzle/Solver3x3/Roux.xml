<?xml version="1.0" encoding="utf-8" ?>
<Solver>

  <States>
    <State Name="LeftCenter">Left Blue</State>
  </States>

  <Step Name="MoveBlueCenterToLeft">
    <InitialState>!{LeftCenter}</InitialState>

    <Algorithm>
      <Description>Move blue face from Back to Left</Description>
      <InitialState>Back Blue</InitialState>
      <Moves>y'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move blue face from Front to Left</Description>
      <InitialState>Front Blue</InitialState>
      <Moves>y</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move blue face from Right to Left</Description>
      <InitialState>Right Blue</InitialState>
      <Moves>y2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move blue face from Up to Left</Description>
      <InitialState>Up Blue</InitialState>
      <Moves>z'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move blue face from Down to Left</Description>
      <InitialState>Down Blue</InitialState>
      <Moves>z</Moves>
    </Algorithm>

    <FinishedState>{LeftCenter}</FinishedState>
  </Step>

  <States>
    <State Name="LeftCenterAndBottomEdge">{LeftCenter}, LeftDown Blue White</State>
  </States>

  <Step Name="FirstPieceToBottomLeft">
    <InitialState>{LeftCenter}, !LeftDown Blue White</InitialState>

    <Algorithm>
      <Description>Flip down left edge</Description>
      <InitialState>LeftDown White Blue</InitialState>
      <Moves>D F L, D' B' L', L B D, L' F' D'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from back left</Description>
      <InitialState>BackLeft White Blue</InitialState>
      <Moves>L'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edit from back left and flip</Description>
      <InitialState>BackLeft Blue White</InitialState>
      <Moves>B D</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from top left</Description>
      <InitialState>LeftUp Blue White</InitialState>
      <Moves>L2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from top left and flip</Description>
      <InitialState>LeftUp White Blue</InitialState>
      <Moves>U B L', U' F' L, L F' D', L' B D</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from front left</Description>
      <InitialState>FrontLeft White Blue</InitialState>
      <Moves>L</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from front left and flip</Description>
      <InitialState>FrontLeft Blue White</InitialState>
      <Moves>F' D'</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge from back bottom</Description>
      <InitialState>BackDown Blue White</InitialState>
      <Moves>D</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from back bottom and flip</Description>
      <InitialState>BackDown White Blue</InitialState>
      <Moves>B' L'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from back top</Description>
      <InitialState>BackUp Blue White</InitialState>
      <Moves>U' L2, B2 D</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from back top and flip</Description>
      <InitialState>BackUp White Blue</InitialState>
      <Moves>B L'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from front bottom</Description>
      <InitialState>FrontDown Blue White</InitialState>
      <Moves>D'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from front bottom and flip</Description>
      <InitialState>FrontDown White Blue</InitialState>
      <Moves>F L</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from front up</Description>
      <InitialState>FrontUp Blue White</InitialState>
      <Moves>F2 D', U L2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from front up and flip</Description>
      <InitialState>FrontUp White Blue</InitialState>
      <Moves>F' L</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Move edge from right down</Description>
      <InitialState>RightDown Blue White</InitialState>
      <Moves>D2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from right down and flip</Description>
      <InitialState>RightDown White Blue</InitialState>
      <Moves>R F D', R' B' D, D B' L', D' F L</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from right back</Description>
      <InitialState>RightBack White Blue</InitialState>
      <Moves>B' D</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from right back and flip</Description>
      <InitialState>RightBack Blue White</InitialState>
      <Moves>R D2, B2 L'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from right front</Description>
      <InitialState>RightFront Blue White</InitialState>
      <Moves>R' D2, F2 L</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from right front and flip</Description>
      <InitialState>RightFront White Blue</InitialState>
      <Moves>F D'</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from right up</Description>
      <InitialState>RightUp Blue White</InitialState>
      <Moves>U2 L2, R2 D2</Moves>
    </Algorithm>
    <Algorithm>
      <Description>Move edge from right up</Description>
      <InitialState>RightUp White Blue</InitialState>
      <Moves>U F' L, R B' D, R' F D', U' B L'</Moves>
    </Algorithm>

    <FinishedState>{LeftCenterAndBottomEdge}</FinishedState>
  </Step>

  <States>
    <State Name="AFrontDownPieceIsInPosition">
      <Or>
        <Checks>FrontDown* C1 C2</Checks>
        <Checks>FrontDown* C1 C3</Checks>
      </Or>
    </State>
    <State Name="SpecificFrontDownPieceInPosition">{LeftCenterAndBottomEdge}, FrontDown* C1 C2</State>
    <State Name="BlockPairInPositionAtTop">
      <Or>
        <Checks>LeftFrontUp White C1 C2, FrontUp C1 C2</Checks>
        <Checks>RightBackUp White C1 C2, BackUp C1 C2</Checks>
        <Checks>RightFrontUp White C1 C2, FrontUp C2 C1</Checks>
        <Checks>LeftBackUp White C1 C2, BackUp C2 C1</Checks>
      </Or>
    </State>
    <State Name="LeftFrontBlockPairSolved">LeftFront Blue Red, LeftFrontDown Blue White Red</State>
    <State Name="LeftBackBlockPairSolved">LeftBack Blue Orange, LeftBackDown Blue Orange White</State>
  </States>

  <Algorithms>
    <Algorithm Name="FrontUpToFrontDown">
      <Description>Move edge from Front Up</Description>
      <InitialState>FrontUp* C1 C2</InitialState>
      <Moves>M</Moves>
    </Algorithm>

    <Algorithm Name="BackUpToFrontDown">
      <Description>Move edge from Back Up</Description>
      <InitialState>UpBack* C1 C2</InitialState>
      <Moves>M2</Moves>
    </Algorithm>

    <Algorithm Name="RightUpToFrontDown">
      <Description>Move edge from Right Up</Description>
      <InitialState>RightUp* C1 C2</InitialState>
      <Moves>U M</Moves>
    </Algorithm>

    <Algorithm Name="LeftUpToFrontDown">
      <Description>Move edge from Left Up</Description>
      <InitialState>LeftUp* C1 C2</InitialState>
      <Moves>U' M</Moves>
    </Algorithm>

    <Algorithm Name="FrontLeftToFrontDown">
      <Description>Move edge from Front Left</Description>
      <InitialState>FrontLeft* C1 C2</InitialState>
      <Moves>F'</Moves>
    </Algorithm>

    <Algorithm Name="FrontRightToFrontDown">
      <Description>Move edge from front right</Description>
      <InitialState>FrontRight* C1 C2</InitialState>
      <Moves>R U M</Moves>
    </Algorithm>

    <Algorithm Name="LeftBackToFrontDown">
      <Description>Move edge from Left Back</Description>
      <InitialState>LeftBack* C1 C2</InitialState>
      <Moves>B' M2, B M'</Moves>
    </Algorithm>

    <Algorithm Name="BackRightToFrontDown">
      <Description>Move edge from back right</Description>
      <InitialState>BackRight* C1 C2</InitialState>
      <Moves>B M2, B' M'</Moves>
    </Algorithm>

    <Algorithm Name="BackDownToFrontDown">
      <Description>Move edge from back down</Description>
      <InitialState>BackDown* C1 C2</InitialState>
      <Moves>M'</Moves>
    </Algorithm>

    <Algorithm Name="RightDownToFrontDown">
      <Description>Move edge from Right Down</Description>
      <InitialState>RightDown* C1 C2</InitialState>
      <Moves>R2 U M</Moves>
    </Algorithm>
  </Algorithms>

  <Step Name="MoveRedBlueToFrontBottom">
    <InitialState>
      {LeftCenterAndBottomEdge},
      !{LeftFrontBlockPairSolved},
      !{AFrontDownPieceIsInPosition Blue Red Orange},
      !{BlockPairInPositionAtTop Red Blue}
    </InitialState>
    
    {FrontUpToFrontDown Red Blue},
    {BackUpToFrontDown Red Blue},
    {RightUpToFrontDown Red Blue},
    {LeftUpToFrontDown Red Blue},
    {FrontLeftToFrontDown Red Blue},
    {FrontRightToFrontDown Red Blue},
    {LeftBackToFrontDown Red Blue},
    {BackRightToFrontDown Red Blue},
    {BackDownToFrontDown Red Blue},
    {RightDownToFrontDown Red Blue}

    <FinishedState>{SpecificFrontDownPieceInPosition Red Blue}</FinishedState>
  </Step>

  <Step Name="MoveBlueOrangeToFrontBottom">
    <InitialState>
      {LeftCenterAndBottomEdge},
      !{LeftBackBlockPairSolved},
      !{AFrontDownPieceIsInPosition Blue Red Orange},
      !{BlockPairInPositionAtTop Blue Orange}
    </InitialState>

    {FrontUpToFrontDown Blue Orange},
    {BackUpToFrontDown Blue Orange},
    {RightUpToFrontDown Blue Orange},
    {LeftUpToFrontDown Blue Orange},
    {FrontLeftToFrontDown Blue Orange},
    {FrontRightToFrontDown Blue Orange},
    {LeftBackToFrontDown Blue Orange},
    {BackRightToFrontDown Blue Orange},
    {BackDownToFrontDown Blue Orange},
    {RightDownToFrontDown Blue Orange}

    <FinishedState>{SpecificFrontDownPieceInPosition Blue Orange}</FinishedState>
  </Step>

  <States>
    <State Name="ReadyToJoinPairAtTop">
      <Checks>{SpecificFrontDownPieceInPosition C1 C2}</Checks>
      <Or>
        <Checks>LeftFrontUp White C1 C2</Checks>
        <Checks>RightFrontUp White C1 C2</Checks>
        <Checks>LeftBackUp White C1 C2</Checks>
        <Checks>RightBackUp White C1 C2</Checks>
      </Or>
    </State>
  </States>
  
  <Algorithms>
    <Algorithm Name="LeftFrontDownToUpFacingOut1">
      <Description>Move Left Front Down corner to top</Description>
      <InitialState>LeftFrontDown White C1 C2</InitialState>
      <Moves>L' U2 L</Moves>
    </Algorithm>
    <Algorithm Name="LeftFrontDownToUpFacingOut2">
      <Description>Move Front Left Down corner to top</Description>
      <InitialState>FrontLeftDown White C1 C2</InitialState>
      <Moves>F U F'</Moves>
    </Algorithm>
    <Algorithm Name="LeftFrontDownToUpFacingOut3">
      <Description>Move Down Front Left corner to top</Description>
      <InitialState>DownFrontLeft White C1 C2</InitialState>
      <Moves>L' U' L</Moves>
    </Algorithm>

    <Algorithm Name="RightFrontDownToUpFacingOut1">
      <Description>Move Right Front Down corner to top</Description>
      <InitialState>RightFrontDown White C1 C2</InitialState>
      <Moves>R U2</Moves>
    </Algorithm>
    <Algorithm Name="RightFrontDownToUpFacingOut2">
      <Description>Move Front Right Down corner to top</Description>
      <InitialState>FrontRightDown White C1 C2</InitialState>
      <Moves>F' U' F</Moves>
    </Algorithm>
    <Algorithm Name="RightFrontDownToUpFacingOut3">
      <Description>Move Down Front Right corner to top</Description>
      <InitialState>DownFrontRight White C1 C2</InitialState>
      <Moves>R U</Moves>
    </Algorithm>

    <Algorithm Name="LeftBackDownToUpFacingOut1">
      <Description>Move Left Back Down corner to top</Description>
      <InitialState>LeftBackDown White C1 C2</InitialState>
      <Moves>L U2 L'</Moves>
    </Algorithm>
    <Algorithm Name="LeftBackDownToUpFacingOut2">
      <Description>Move Back Left Down corner to top</Description>
      <InitialState>BackLeftDown White C1 C2</InitialState>
      <Moves>B' U'</Moves>
    </Algorithm>
    <Algorithm Name="LeftBackDownToUpFacingOut3">
      <Description>Move Down Back Left corner to top</Description>
      <InitialState>DownBackLeft White C1 C2</InitialState>
      <Moves>B' U2</Moves>
    </Algorithm>

    <Algorithm Name="RightBackDownToUpFacingOut1">
      <Description>Move Right Back Down corner to top</Description>
      <InitialState>RightBackDown White C1 C2</InitialState>
      <Moves>R' U2</Moves>
    </Algorithm>
    <Algorithm Name="RightBackDownToUpFacingOut2">
      <Description>Move Back Down Right corner to top</Description>
      <InitialState>BackRightDown White C1 C2</InitialState>
      <Moves>R2 U</Moves>
    </Algorithm>
    <Algorithm Name="RightBackDownToUpFacingOut3">
      <Description>Move Down Back Right corner to top</Description>
      <InitialState>DownBackRight White C1 C2</InitialState>
      <Moves>R' U'</Moves>
    </Algorithm>

    <Algorithm Name="UpWhiteCornerToFacingOut">
      <Description>Rotate white corner out facing out</Description>
      <InitialState>
        <Or>
          <Checks>BackLeftUp White C1 C2</Checks>
          <Checks>BackRightUp White C1 C2</Checks>
          <Checks>FrontLeftUp White C1 C2</Checks>
          <Checks>FrontRightUp White C1 C2</Checks>
        </Or>
      </InitialState>
      <Moves>U, U'</Moves>
    </Algorithm>

    <Algorithm Name="UpFrontLeftToFacingOut">
      <Description>Rotate white Left Front Up corner out</Description>
      <InitialState>UpFrontLeft White C1 C2</InitialState>
      <Moves>U' R U</Moves>
    </Algorithm>

    <Algorithm Name="UpBackLeftToFacingOut">
      <Description>Rotate white Left Back Up corner out</Description>
      <InitialState>UpBackLeft White C1 C2</InitialState>
      <Moves>U R' U</Moves>
    </Algorithm>

    <Algorithm Name="UpBackRightToFacingOut">
      <Description>Rotate white Right Back Up corner out</Description>
      <InitialState>UpBackRight White C1 C2</InitialState>
      <Moves>R' U, R' U'</Moves>
    </Algorithm>

    <Algorithm Name="UpFrontRightToFacingOut">
      <Description>Rotate white Right Front Up corner out</Description>
      <InitialState>UpFrontRight White C1 C2</InitialState>
      <Moves>R U'</Moves>
    </Algorithm>
  </Algorithms>

  <Step Name="MoveWhiteRedBlueCornerToTopFacingOut">
    <InitialState>
      {SpecificFrontDownPieceInPosition Red Blue},
      !LeftFrontUp White Red Blue,
      !RightFrontUp White Red Blue,
      !LeftBackUp White Red Blue,
      !RightBackUp White Red Blue
    </InitialState>

    {LeftFrontDownToUpFacingOut1 Red Blue},
    {LeftFrontDownToUpFacingOut2 Red Blue},
    {LeftFrontDownToUpFacingOut3 Red Blue},

    {RightFrontDownToUpFacingOut1 Red Blue},
    {RightFrontDownToUpFacingOut2 Red Blue},
    {RightFrontDownToUpFacingOut3 Red Blue},

    {LeftBackDownToUpFacingOut1 Red Blue},
    {LeftBackDownToUpFacingOut2 Red Blue},
    {LeftBackDownToUpFacingOut3 Red Blue},

    {RightBackDownToUpFacingOut1 Red Blue},
    {RightBackDownToUpFacingOut2 Red Blue},
    {RightBackDownToUpFacingOut3 Red Blue},

    {UpWhiteCornerToFacingOut Red Blue},

    {UpFrontLeftToFacingOut Red Blue},

    {UpFrontRightToFacingOut Red Blue},

    {UpBackLeftToFacingOut Red Blue},

    {UpBackRightToFacingOut Red Blue}

    <FinishedState>{ReadyToJoinPairAtTop Red Blue}</FinishedState>
  </Step>

  <Step Name="MoveWhiteBlueOrangeCornerToTopFacingOut">
    <InitialState>
      {SpecificFrontDownPieceInPosition Blue Orange},
      !LeftFrontUp White Blue Orange,
      !RightFrontUp White Blue Orange,
      !LeftBackUp White Blue Orange,
      !RightBackUp White Blue Orange
    </InitialState>

    {LeftFrontDownToUpFacingOut1 Blue Orange},
    {LeftFrontDownToUpFacingOut2 Blue Orange},
    {LeftFrontDownToUpFacingOut3 Blue Orange},

    {RightFrontDownToUpFacingOut1 Blue Orange},
    {RightFrontDownToUpFacingOut2 Blue Orange},
    {RightFrontDownToUpFacingOut3 Blue Orange},

    {LeftBackDownToUpFacingOut1 Blue Orange},
    {LeftBackDownToUpFacingOut2 Blue Orange},
    {LeftBackDownToUpFacingOut3 Blue Orange},

    {RightBackDownToUpFacingOut1 Blue Orange},
    {RightBackDownToUpFacingOut2 Blue Orange},
    {RightBackDownToUpFacingOut3 Blue Orange},

    {UpWhiteCornerToFacingOut Blue Orange},

    {UpFrontLeftToFacingOut Blue Orange},

    {UpFrontRightToFacingOut Blue Orange},

    {UpBackLeftToFacingOut Blue Orange},

    {UpBackRightToFacingOut Blue Orange}

    <FinishedState>{ReadyToJoinPairAtTop Blue Orange}</FinishedState>
  </Step>

  <Algorithms>
    <Algorithm Name="JoinLeftFrontUpPairFlip">
      <Description>Join pair at top</Description>
      <InitialState>LeftFrontUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>U2 M2</Moves>
    </Algorithm>

    <Algorithm Name="JoinLeftFrontUpPair">
      <Description>Join pair at top</Description>
      <InitialState>LeftFrontUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>M'</Moves>
    </Algorithm>

    <Algorithm Name="JoinRightFrontUpPair">
      <Description>Join pair at top</Description>
      <InitialState>RightFrontUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>M'</Moves>
    </Algorithm>

    <Algorithm Name="JoinRightFrontUpPairFlip">
      <Description>Join pair at top</Description>
      <InitialState>RightFrontUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>U2 M2</Moves>
    </Algorithm>

    <Algorithm Name="JoinLeftBackUpPairFlip">
      <Description>Join pair at top</Description>
      <InitialState>LeftBackUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>U2 M'</Moves>
    </Algorithm>

    <Algorithm Name="JoinLeftBackUpPair">
      <Description>Join pair at top</Description>
      <InitialState>LeftBackUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>M2</Moves>
    </Algorithm>

    <Algorithm Name="JoinRightBackUpPair">
      <Description>Join pair at top</Description>
      <InitialState>RightBackUp White C1 C2, FrontDown C1 C2</InitialState>
      <Moves>M2</Moves>
    </Algorithm>

    <Algorithm Name="JoinRightBackUpPairFlip">
      <Description>Join pair at top</Description>
      <InitialState>RightBackUp White C1 C2, FrontDown C2 C1</InitialState>
      <Moves>U2 M'</Moves>
    </Algorithm>
  </Algorithms>

  <Step Name="JoinFrontDownToBlueRedTopCorner">
    <InitialState>{ReadyToJoinPairAtTop Red Blue}</InitialState>

    {JoinLeftFrontUpPair Red Blue},
    {JoinLeftFrontUpPairFlip Red Blue},

    {JoinRightFrontUpPair Red Blue},
    {JoinRightFrontUpPairFlip Red Blue},

    {JoinLeftBackUpPairFlip Red Blue},
    {JoinLeftBackUpPair Red Blue},

    {JoinRightBackUpPair Red Blue},
    {JoinRightBackUpPairFlip Red Blue}

    <FinishedState>{LeftCenterAndBottomEdge}, {BlockPairInPositionAtTop Red Blue}</FinishedState>
  </Step>

  <Step Name="JoinFrontDownToBlueOrangeTopCorner">
    <InitialState>{ReadyToJoinPairAtTop Blue Orange}</InitialState>

    {JoinLeftFrontUpPair Blue Orange},
    {JoinLeftFrontUpPairFlip Blue Orange},

    {JoinRightFrontUpPair Blue Orange},
    {JoinRightFrontUpPairFlip Blue Orange},

    {JoinLeftBackUpPairFlip Blue Orange},
    {JoinLeftBackUpPair Blue Orange},

    {JoinRightBackUpPair Blue Orange},
    {JoinRightBackUpPairFlip Blue Orange}

    <FinishedState>{LeftCenterAndBottomEdge}, {BlockPairInPositionAtTop Blue Orange}</FinishedState>
  </Step>

  <Step Name="PairToLeftFront">
    <InitialState>{LeftCenterAndBottomEdge}, {BlockPairInPositionAtTop Red Blue}</InitialState>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>LeftFrontUp White Red Blue, FrontUp Red Blue</InitialState>
      <Moves>F'</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>RightFrontUp White Red Blue, FrontUp Blue Red</InitialState>
      <Moves>L' U L</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>LeftBackUp White Red Blue, BackUp Blue Red</InitialState>
      <Moves>U2 L' U L</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>RightBackUp White Red Blue, BackUp Red Blue</InitialState>
      <Moves>U2 F'</Moves>
    </Algorithm>

    <FinishedState>{LeftCenterAndBottomEdge}, LeftFront Blue Red, LeftFrontDown Blue White Red</FinishedState>
  </Step>

  <Step Name="PairToLeftBack">
    <InitialState>{LeftCenterAndBottomEdge}, {BlockPairInPositionAtTop Blue Orange}</InitialState>

    <Algorithm>
      <Description>Pair to Left Back</Description>
      <InitialState>LeftFrontUp White Blue Orange, UpFront Orange Blue</InitialState>
      <Moves>U2 L U' L'</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>RightFrontUp White Blue Orange, UpFront Blue Orange</InitialState>
      <Moves>U2 B</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>LeftBackUp White Blue Orange, BackUp Orange Blue</InitialState>
      <Moves>B</Moves>
    </Algorithm>

    <Algorithm>
      <Description>Pair to Left Front</Description>
      <InitialState>RightBackUp White Blue Orange, BackUp Blue Orange</InitialState>
      <Moves>L U' L'</Moves>
    </Algorithm>

    <FinishedState>{LeftCenterAndBottomEdge}, LeftBack Blue Orange, LeftBackDown Blue Orange White</FinishedState>
  </Step>
</Solver>